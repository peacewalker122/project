// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    hashed_password,
    full_name,
    email
) VALUES(
    $1,$2,$3,$4
) RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, id
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ID,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one
SELECT username,email FROM users
WHERE email = $1 or username = $2 LIMIT 1
`

type GetEmailParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

type GetEmailRow struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetEmail(ctx context.Context, arg GetEmailParams) (GetEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getEmail, arg.Email, arg.Username)
	var i GetEmailRow
	err := row.Scan(&i.Username, &i.Email)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, password_changed_at, created_at, id FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ID,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT username, hashed_password, full_name, email, password_changed_at, created_at, id FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserData = `-- name: UpdateUserData :exec
UPDATE users
SET
    hashed_password = COALESCE($1, hashed_password),
    full_name = COALESCE($2, full_name),
    email = COALESCE($3, email),
    username = COALESCE($4, username)
WHERE username = $4
RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, id
`

type UpdateUserDataParams struct {
	HashedPassword sql.NullString `json:"hashed_password"`
	FullName       sql.NullString `json:"full_name"`
	Email          sql.NullString `json:"email"`
	Username       sql.NullString `json:"username"`
}

func (q *Queries) UpdateUserData(ctx context.Context, arg UpdateUserDataParams) error {
	_, err := q.db.ExecContext(ctx, updateUserData,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	return err
}
