// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/peacewalker122/project/service/db/repository/postgres (interfaces: PostgresStore)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	ent "github.com/peacewalker122/project/service/db/repository/postgres/ent"
	account "github.com/peacewalker122/project/service/db/repository/postgres/payload/model/account"
	notifquery "github.com/peacewalker122/project/service/db/repository/postgres/payload/model/notif_query"
	params "github.com/peacewalker122/project/service/db/repository/postgres/payload/model/params"
	tokens "github.com/peacewalker122/project/service/db/repository/postgres/payload/model/tokens"
	tx "github.com/peacewalker122/project/service/db/repository/postgres/payload/model/tx"
	users "github.com/peacewalker122/project/service/db/repository/postgres/payload/model/users"
	db "github.com/peacewalker122/project/service/db/repository/postgres/sqlc"
)

// MockPostgresStore is a mock of PostgresStore interface.
type MockPostgresStore struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresStoreMockRecorder
}

// MockPostgresStoreMockRecorder is the mock recorder for MockPostgresStore.
type MockPostgresStoreMockRecorder struct {
	mock *MockPostgresStore
}

// NewMockPostgresStore creates a new mock instance.
func NewMockPostgresStore(ctrl *gomock.Controller) *MockPostgresStore {
	mock := &MockPostgresStore{ctrl: ctrl}
	mock.recorder = &MockPostgresStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresStore) EXPECT() *MockPostgresStoreMockRecorder {
	return m.recorder
}

// ChangePasswordAuth mocks base method.
func (m *MockPostgresStore) ChangePasswordAuth(arg0 context.Context, arg1 params.ChangePasswordParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePasswordAuth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePasswordAuth indicates an expected call of ChangePasswordAuth.
func (mr *MockPostgresStoreMockRecorder) ChangePasswordAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePasswordAuth", reflect.TypeOf((*MockPostgresStore)(nil).ChangePasswordAuth), arg0, arg1)
}

// CreateAccountQueue mocks base method.
func (m *MockPostgresStore) CreateAccountQueue(arg0 context.Context, arg1 db.CreateAccountQueueParams) (db.AccountsQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountQueue", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountQueue indicates an expected call of CreateAccountQueue.
func (mr *MockPostgresStoreMockRecorder) CreateAccountQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountQueue", reflect.TypeOf((*MockPostgresStore)(nil).CreateAccountQueue), arg0, arg1)
}

// CreateAccounts mocks base method.
func (m *MockPostgresStore) CreateAccounts(arg0 context.Context, arg1 db.CreateAccountsParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccounts", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccounts indicates an expected call of CreateAccounts.
func (mr *MockPostgresStoreMockRecorder) CreateAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccounts", reflect.TypeOf((*MockPostgresStore)(nil).CreateAccounts), arg0, arg1)
}

// CreateAccountsFollow mocks base method.
func (m *MockPostgresStore) CreateAccountsFollow(arg0 context.Context, arg1 db.CreateAccountsFollowParams) (db.AccountsFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountsFollow", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountsFollow indicates an expected call of CreateAccountsFollow.
func (mr *MockPostgresStoreMockRecorder) CreateAccountsFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountsFollow", reflect.TypeOf((*MockPostgresStore)(nil).CreateAccountsFollow), arg0, arg1)
}

// CreateAccountsQueueTX mocks base method.
func (m *MockPostgresStore) CreateAccountsQueueTX(arg0 context.Context, arg1 db.CreateAccountQueueParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountsQueueTX", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountsQueueTX indicates an expected call of CreateAccountsQueueTX.
func (mr *MockPostgresStoreMockRecorder) CreateAccountsQueueTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountsQueueTX", reflect.TypeOf((*MockPostgresStore)(nil).CreateAccountsQueueTX), arg0, arg1)
}

// CreateCommentTX mocks base method.
func (m *MockPostgresStore) CreateCommentTX(arg0 context.Context, arg1 db.CreateCommentParams) (db.CreateCommentTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentTX", arg0, arg1)
	ret0, _ := ret[0].(db.CreateCommentTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentTX indicates an expected call of CreateCommentTX.
func (mr *MockPostgresStoreMockRecorder) CreateCommentTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentTX", reflect.TypeOf((*MockPostgresStore)(nil).CreateCommentTX), arg0, arg1)
}

// CreateComment_feature mocks base method.
func (m *MockPostgresStore) CreateComment_feature(arg0 context.Context, arg1 db.CreateComment_featureParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment_feature", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment_feature indicates an expected call of CreateComment_feature.
func (mr *MockPostgresStoreMockRecorder) CreateComment_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment_feature", reflect.TypeOf((*MockPostgresStore)(nil).CreateComment_feature), arg0, arg1)
}

// CreateEntries mocks base method.
func (m *MockPostgresStore) CreateEntries(arg0 context.Context, arg1 db.CreateEntriesParams) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntries", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntries indicates an expected call of CreateEntries.
func (mr *MockPostgresStoreMockRecorder) CreateEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntries", reflect.TypeOf((*MockPostgresStore)(nil).CreateEntries), arg0, arg1)
}

// CreateFileIndex mocks base method.
func (m *MockPostgresStore) CreateFileIndex(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileIndex", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileIndex indicates an expected call of CreateFileIndex.
func (mr *MockPostgresStoreMockRecorder) CreateFileIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileIndex", reflect.TypeOf((*MockPostgresStore)(nil).CreateFileIndex), arg0, arg1)
}

// CreateLikeTX mocks base method.
func (m *MockPostgresStore) CreateLikeTX(arg0 context.Context, arg1 db.CreateLikeParams) (db.CreateLikeTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLikeTX", arg0, arg1)
	ret0, _ := ret[0].(db.CreateLikeTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLikeTX indicates an expected call of CreateLikeTX.
func (mr *MockPostgresStoreMockRecorder) CreateLikeTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLikeTX", reflect.TypeOf((*MockPostgresStore)(nil).CreateLikeTX), arg0, arg1)
}

// CreateLike_feature mocks base method.
func (m *MockPostgresStore) CreateLike_feature(arg0 context.Context, arg1 db.CreateLike_featureParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike_feature", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike_feature indicates an expected call of CreateLike_feature.
func (mr *MockPostgresStoreMockRecorder) CreateLike_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike_feature", reflect.TypeOf((*MockPostgresStore)(nil).CreateLike_feature), arg0, arg1)
}

// CreateNotif mocks base method.
func (m *MockPostgresStore) CreateNotif(arg0 context.Context, arg1 *notifquery.NotifParams) (*ent.AccountNotifs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotif", arg0, arg1)
	ret0, _ := ret[0].(*ent.AccountNotifs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotif indicates an expected call of CreateNotif.
func (mr *MockPostgresStoreMockRecorder) CreateNotif(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotif", reflect.TypeOf((*MockPostgresStore)(nil).CreateNotif), arg0, arg1)
}

// CreateNotifUsername mocks base method.
func (m *MockPostgresStore) CreateNotifUsername(arg0 context.Context, arg1 *notifquery.NotifParams) (*ent.AccountNotifs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotifUsername", arg0, arg1)
	ret0, _ := ret[0].(*ent.AccountNotifs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotifUsername indicates an expected call of CreateNotifUsername.
func (mr *MockPostgresStoreMockRecorder) CreateNotifUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotifUsername", reflect.TypeOf((*MockPostgresStore)(nil).CreateNotifUsername), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockPostgresStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostgresStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostgresStore)(nil).CreatePost), arg0, arg1)
}

// CreatePostTx mocks base method.
func (m *MockPostgresStore) CreatePostTx(arg0 context.Context, arg1 db.CreatePostParams) (db.PostTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTx", arg0, arg1)
	ret0, _ := ret[0].(db.PostTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTx indicates an expected call of CreatePostTx.
func (mr *MockPostgresStoreMockRecorder) CreatePostTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTx", reflect.TypeOf((*MockPostgresStore)(nil).CreatePostTx), arg0, arg1)
}

// CreatePost_feature mocks base method.
func (m *MockPostgresStore) CreatePost_feature(arg0 context.Context, arg1 int64) (db.PostFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost_feature", arg0, arg1)
	ret0, _ := ret[0].(db.PostFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost_feature indicates an expected call of CreatePost_feature.
func (mr *MockPostgresStoreMockRecorder) CreatePost_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost_feature", reflect.TypeOf((*MockPostgresStore)(nil).CreatePost_feature), arg0, arg1)
}

// CreatePrivateQueue mocks base method.
func (m *MockPostgresStore) CreatePrivateQueue(arg0 context.Context, arg1 db.CreatePrivateQueueParams) (db.AccountsQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateQueue", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateQueue indicates an expected call of CreatePrivateQueue.
func (mr *MockPostgresStoreMockRecorder) CreatePrivateQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateQueue", reflect.TypeOf((*MockPostgresStore)(nil).CreatePrivateQueue), arg0, arg1)
}

// CreateQouteRetweet mocks base method.
func (m *MockPostgresStore) CreateQouteRetweet(arg0 context.Context, arg1 db.CreateQRetweetParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQouteRetweet", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQouteRetweet indicates an expected call of CreateQouteRetweet.
func (mr *MockPostgresStoreMockRecorder) CreateQouteRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQouteRetweet", reflect.TypeOf((*MockPostgresStore)(nil).CreateQouteRetweet), arg0, arg1)
}

// CreateQouteRetweetPostTX mocks base method.
func (m *MockPostgresStore) CreateQouteRetweetPostTX(arg0 context.Context, arg1 db.CreateQRetweetParams) (db.CreateQRetweetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQouteRetweetPostTX", arg0, arg1)
	ret0, _ := ret[0].(db.CreateQRetweetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQouteRetweetPostTX indicates an expected call of CreateQouteRetweetPostTX.
func (mr *MockPostgresStoreMockRecorder) CreateQouteRetweetPostTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQouteRetweetPostTX", reflect.TypeOf((*MockPostgresStore)(nil).CreateQouteRetweetPostTX), arg0, arg1)
}

// CreateQouteRetweet_feature mocks base method.
func (m *MockPostgresStore) CreateQouteRetweet_feature(arg0 context.Context, arg1 db.CreateQouteRetweet_featureParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQouteRetweet_feature", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQouteRetweet_feature indicates an expected call of CreateQouteRetweet_feature.
func (mr *MockPostgresStoreMockRecorder) CreateQouteRetweet_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQouteRetweet_feature", reflect.TypeOf((*MockPostgresStore)(nil).CreateQouteRetweet_feature), arg0, arg1)
}

// CreateRetweetPost mocks base method.
func (m *MockPostgresStore) CreateRetweetPost(arg0 context.Context, arg1 db.CreateRetweetParams) (db.CreateRetweetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetweetPost", arg0, arg1)
	ret0, _ := ret[0].(db.CreateRetweetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRetweetPost indicates an expected call of CreateRetweetPost.
func (mr *MockPostgresStoreMockRecorder) CreateRetweetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetweetPost", reflect.TypeOf((*MockPostgresStore)(nil).CreateRetweetPost), arg0, arg1)
}

// CreateRetweetTX mocks base method.
func (m *MockPostgresStore) CreateRetweetTX(arg0 context.Context, arg1 db.CreateRetweetParams) (db.CreateRetweetTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetweetTX", arg0, arg1)
	ret0, _ := ret[0].(db.CreateRetweetTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRetweetTX indicates an expected call of CreateRetweetTX.
func (mr *MockPostgresStoreMockRecorder) CreateRetweetTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetweetTX", reflect.TypeOf((*MockPostgresStore)(nil).CreateRetweetTX), arg0, arg1)
}

// CreateRetweet_feature mocks base method.
func (m *MockPostgresStore) CreateRetweet_feature(arg0 context.Context, arg1 db.CreateRetweet_featureParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetweet_feature", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRetweet_feature indicates an expected call of CreateRetweet_feature.
func (mr *MockPostgresStoreMockRecorder) CreateRetweet_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetweet_feature", reflect.TypeOf((*MockPostgresStore)(nil).CreateRetweet_feature), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockPostgresStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockPostgresStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockPostgresStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockPostgresStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPostgresStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPostgresStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockPostgresStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserParamsTx) (db.CreateUserTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockPostgresStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockPostgresStore)(nil).CreateUserTx), arg0, arg1)
}

// DeleteAccountQueue mocks base method.
func (m *MockPostgresStore) DeleteAccountQueue(arg0 context.Context, arg1 db.DeleteAccountQueueParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountQueue indicates an expected call of DeleteAccountQueue.
func (mr *MockPostgresStoreMockRecorder) DeleteAccountQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountQueue", reflect.TypeOf((*MockPostgresStore)(nil).DeleteAccountQueue), arg0, arg1)
}

// DeleteAccountsFollow mocks base method.
func (m *MockPostgresStore) DeleteAccountsFollow(arg0 context.Context, arg1 db.DeleteAccountsFollowParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountsFollow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountsFollow indicates an expected call of DeleteAccountsFollow.
func (mr *MockPostgresStoreMockRecorder) DeleteAccountsFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountsFollow", reflect.TypeOf((*MockPostgresStore)(nil).DeleteAccountsFollow), arg0, arg1)
}

// DeleteAcoountsQueue mocks base method.
func (m *MockPostgresStore) DeleteAcoountsQueue(arg0 context.Context, arg1 db.DeleteAcoountsQueueParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcoountsQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAcoountsQueue indicates an expected call of DeleteAcoountsQueue.
func (mr *MockPostgresStoreMockRecorder) DeleteAcoountsQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcoountsQueue", reflect.TypeOf((*MockPostgresStore)(nil).DeleteAcoountsQueue), arg0, arg1)
}

// DeleteNotif mocks base method.
func (m *MockPostgresStore) DeleteNotif(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotif", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotif indicates an expected call of DeleteNotif.
func (mr *MockPostgresStoreMockRecorder) DeleteNotif(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotif", reflect.TypeOf((*MockPostgresStore)(nil).DeleteNotif), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostgresStore) DeletePost(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostgresStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostgresStore)(nil).DeletePost), arg0, arg1)
}

// DeletePostFeature mocks base method.
func (m *MockPostgresStore) DeletePostFeature(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostFeature", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostFeature indicates an expected call of DeletePostFeature.
func (mr *MockPostgresStoreMockRecorder) DeletePostFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostFeature", reflect.TypeOf((*MockPostgresStore)(nil).DeletePostFeature), arg0, arg1)
}

// DeleteQouteRetweet mocks base method.
func (m *MockPostgresStore) DeleteQouteRetweet(arg0 context.Context, arg1 db.DeleteQouteRetweetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQouteRetweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQouteRetweet indicates an expected call of DeleteQouteRetweet.
func (mr *MockPostgresStoreMockRecorder) DeleteQouteRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQouteRetweet", reflect.TypeOf((*MockPostgresStore)(nil).DeleteQouteRetweet), arg0, arg1)
}

// DeleteQouteRetweetTX mocks base method.
func (m *MockPostgresStore) DeleteQouteRetweetTX(arg0 context.Context, arg1 db.UnRetweetTXParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQouteRetweetTX", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQouteRetweetTX indicates an expected call of DeleteQouteRetweetTX.
func (mr *MockPostgresStoreMockRecorder) DeleteQouteRetweetTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQouteRetweetTX", reflect.TypeOf((*MockPostgresStore)(nil).DeleteQouteRetweetTX), arg0, arg1)
}

// DeleteRetweet mocks base method.
func (m *MockPostgresStore) DeleteRetweet(arg0 context.Context, arg1 db.DeleteRetweetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetweet indicates an expected call of DeleteRetweet.
func (mr *MockPostgresStoreMockRecorder) DeleteRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetweet", reflect.TypeOf((*MockPostgresStore)(nil).DeleteRetweet), arg0, arg1)
}

// DeleteRetweetTX mocks base method.
func (m *MockPostgresStore) DeleteRetweetTX(arg0 context.Context, arg1 db.DeleteRetweetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetweetTX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetweetTX indicates an expected call of DeleteRetweetTX.
func (mr *MockPostgresStoreMockRecorder) DeleteRetweetTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetweetTX", reflect.TypeOf((*MockPostgresStore)(nil).DeleteRetweetTX), arg0, arg1)
}

// Followtx mocks base method.
func (m *MockPostgresStore) Followtx(arg0 context.Context, arg1 db.FollowTXParam) (db.FollowTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Followtx", arg0, arg1)
	ret0, _ := ret[0].(db.FollowTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followtx indicates an expected call of Followtx.
func (mr *MockPostgresStoreMockRecorder) Followtx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followtx", reflect.TypeOf((*MockPostgresStore)(nil).Followtx), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockPostgresStore) GetAccount(arg0 context.Context, arg1 string) (*ent.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*ent.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockPostgresStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockPostgresStore)(nil).GetAccount), arg0, arg1)
}

// GetAccountByEmail mocks base method.
func (m *MockPostgresStore) GetAccountByEmail(arg0 context.Context, arg1 string) (db.GetAccountByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetAccountByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockPostgresStoreMockRecorder) GetAccountByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountByEmail), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockPostgresStore) GetAccountForUpdate(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockPostgresStoreMockRecorder) GetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetAccountID mocks base method.
func (m *MockPostgresStore) GetAccountID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountID indicates an expected call of GetAccountID.
func (mr *MockPostgresStoreMockRecorder) GetAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountID", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountID), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockPostgresStore) GetAccounts(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockPostgresStoreMockRecorder) GetAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockPostgresStore)(nil).GetAccounts), arg0, arg1)
}

// GetAccountsFollow mocks base method.
func (m *MockPostgresStore) GetAccountsFollow(arg0 context.Context, arg1 db.GetAccountsFollowParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsFollow", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsFollow indicates an expected call of GetAccountsFollow.
func (mr *MockPostgresStoreMockRecorder) GetAccountsFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsFollow", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountsFollow), arg0, arg1)
}

// GetAccountsFollowRows mocks base method.
func (m *MockPostgresStore) GetAccountsFollowRows(arg0 context.Context, arg1 db.GetAccountsFollowRowsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsFollowRows", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsFollowRows indicates an expected call of GetAccountsFollowRows.
func (mr *MockPostgresStoreMockRecorder) GetAccountsFollowRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsFollowRows", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountsFollowRows), arg0, arg1)
}

// GetAccountsInfo mocks base method.
func (m *MockPostgresStore) GetAccountsInfo(arg0 context.Context, arg1 int64) (db.GetAccountsInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetAccountsInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsInfo indicates an expected call of GetAccountsInfo.
func (mr *MockPostgresStoreMockRecorder) GetAccountsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsInfo", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountsInfo), arg0, arg1)
}

// GetAccountsOwner mocks base method.
func (m *MockPostgresStore) GetAccountsOwner(arg0 context.Context, arg1 string) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsOwner", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsOwner indicates an expected call of GetAccountsOwner.
func (mr *MockPostgresStoreMockRecorder) GetAccountsOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsOwner", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountsOwner), arg0, arg1)
}

// GetAccountsQueue mocks base method.
func (m *MockPostgresStore) GetAccountsQueue(arg0 context.Context, arg1 db.GetAccountsQueueParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsQueue", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsQueue indicates an expected call of GetAccountsQueue.
func (mr *MockPostgresStoreMockRecorder) GetAccountsQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsQueue", reflect.TypeOf((*MockPostgresStore)(nil).GetAccountsQueue), arg0, arg1)
}

// GetAllWithEmail mocks base method.
func (m *MockPostgresStore) GetAllWithEmail(arg0 context.Context, arg1 string) (*ent.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithEmail", arg0, arg1)
	ret0, _ := ret[0].(*ent.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithEmail indicates an expected call of GetAllWithEmail.
func (mr *MockPostgresStoreMockRecorder) GetAllWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithEmail", reflect.TypeOf((*MockPostgresStore)(nil).GetAllWithEmail), arg0, arg1)
}

// GetDirectory mocks base method.
func (m *MockPostgresStore) GetDirectory(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectory", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory.
func (mr *MockPostgresStoreMockRecorder) GetDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockPostgresStore)(nil).GetDirectory), arg0)
}

// GetEmail mocks base method.
func (m *MockPostgresStore) GetEmail(arg0 context.Context, arg1 db.GetEmailParams) (db.GetEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockPostgresStoreMockRecorder) GetEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockPostgresStore)(nil).GetEmail), arg0, arg1)
}

// GetEntries mocks base method.
func (m *MockPostgresStore) GetEntries(arg0 context.Context, arg1 int64) (db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", arg0, arg1)
	ret0, _ := ret[0].(db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockPostgresStoreMockRecorder) GetEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockPostgresStore)(nil).GetEntries), arg0, arg1)
}

// GetEntriesFull mocks base method.
func (m *MockPostgresStore) GetEntriesFull(arg0 context.Context, arg1 db.GetEntriesFullParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesFull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntriesFull indicates an expected call of GetEntriesFull.
func (mr *MockPostgresStoreMockRecorder) GetEntriesFull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesFull", reflect.TypeOf((*MockPostgresStore)(nil).GetEntriesFull), arg0, arg1)
}

// GetLikeInfo mocks base method.
func (m *MockPostgresStore) GetLikeInfo(arg0 context.Context, arg1 db.GetLikeInfoParams) (db.LikeFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeInfo", arg0, arg1)
	ret0, _ := ret[0].(db.LikeFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeInfo indicates an expected call of GetLikeInfo.
func (mr *MockPostgresStoreMockRecorder) GetLikeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeInfo", reflect.TypeOf((*MockPostgresStore)(nil).GetLikeInfo), arg0, arg1)
}

// GetLikeRows mocks base method.
func (m *MockPostgresStore) GetLikeRows(arg0 context.Context, arg1 db.GetLikeRowsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeRows", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeRows indicates an expected call of GetLikeRows.
func (mr *MockPostgresStoreMockRecorder) GetLikeRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeRows", reflect.TypeOf((*MockPostgresStore)(nil).GetLikeRows), arg0, arg1)
}

// GetLikejoin mocks base method.
func (m *MockPostgresStore) GetLikejoin(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikejoin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikejoin indicates an expected call of GetLikejoin.
func (mr *MockPostgresStoreMockRecorder) GetLikejoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikejoin", reflect.TypeOf((*MockPostgresStore)(nil).GetLikejoin), arg0, arg1)
}

// GetNotifByAccount mocks base method.
func (m *MockPostgresStore) GetNotifByAccount(arg0 context.Context, arg1 int64) ([]*ent.AccountNotifs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifByAccount", arg0, arg1)
	ret0, _ := ret[0].([]*ent.AccountNotifs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifByAccount indicates an expected call of GetNotifByAccount.
func (mr *MockPostgresStoreMockRecorder) GetNotifByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifByAccount", reflect.TypeOf((*MockPostgresStore)(nil).GetNotifByAccount), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockPostgresStore) GetPost(arg0 context.Context, arg1 int64) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostgresStoreMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostgresStore)(nil).GetPost), arg0, arg1)
}

// GetPostJoin mocks base method.
func (m *MockPostgresStore) GetPostJoin(arg0 context.Context, arg1 int64) (db.GetPostJoinRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostJoin", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostJoinRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostJoin indicates an expected call of GetPostJoin.
func (mr *MockPostgresStoreMockRecorder) GetPostJoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostJoin", reflect.TypeOf((*MockPostgresStore)(nil).GetPostJoin), arg0, arg1)
}

// GetPostQRetweetJoin mocks base method.
func (m *MockPostgresStore) GetPostQRetweetJoin(arg0 context.Context, arg1 db.GetPostQRetweetJoinParams) (db.GetPostQRetweetJoinRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostQRetweetJoin", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostQRetweetJoinRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostQRetweetJoin indicates an expected call of GetPostQRetweetJoin.
func (mr *MockPostgresStoreMockRecorder) GetPostQRetweetJoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostQRetweetJoin", reflect.TypeOf((*MockPostgresStore)(nil).GetPostQRetweetJoin), arg0, arg1)
}

// GetPost_feature mocks base method.
func (m *MockPostgresStore) GetPost_feature(arg0 context.Context, arg1 int64) (db.PostFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost_feature", arg0, arg1)
	ret0, _ := ret[0].(db.PostFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost_feature indicates an expected call of GetPost_feature.
func (mr *MockPostgresStoreMockRecorder) GetPost_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost_feature", reflect.TypeOf((*MockPostgresStore)(nil).GetPost_feature), arg0, arg1)
}

// GetPost_feature_Update mocks base method.
func (m *MockPostgresStore) GetPost_feature_Update(arg0 context.Context, arg1 int64) (db.GetPost_feature_UpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost_feature_Update", arg0, arg1)
	ret0, _ := ret[0].(db.GetPost_feature_UpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost_feature_Update indicates an expected call of GetPost_feature_Update.
func (mr *MockPostgresStoreMockRecorder) GetPost_feature_Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost_feature_Update", reflect.TypeOf((*MockPostgresStore)(nil).GetPost_feature_Update), arg0, arg1)
}

// GetPostidretweetJoin mocks base method.
func (m *MockPostgresStore) GetPostidretweetJoin(arg0 context.Context, arg1 db.GetPostidretweetJoinParams) (db.GetPostidretweetJoinRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostidretweetJoin", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostidretweetJoinRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostidretweetJoin indicates an expected call of GetPostidretweetJoin.
func (mr *MockPostgresStoreMockRecorder) GetPostidretweetJoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostidretweetJoin", reflect.TypeOf((*MockPostgresStore)(nil).GetPostidretweetJoin), arg0, arg1)
}

// GetQouteRetweet mocks base method.
func (m *MockPostgresStore) GetQouteRetweet(arg0 context.Context, arg1 db.GetQouteRetweetParams) (db.QouteRetweetFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQouteRetweet", arg0, arg1)
	ret0, _ := ret[0].(db.QouteRetweetFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQouteRetweet indicates an expected call of GetQouteRetweet.
func (mr *MockPostgresStoreMockRecorder) GetQouteRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQouteRetweet", reflect.TypeOf((*MockPostgresStore)(nil).GetQouteRetweet), arg0, arg1)
}

// GetQouteRetweetJoin mocks base method.
func (m *MockPostgresStore) GetQouteRetweetJoin(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQouteRetweetJoin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQouteRetweetJoin indicates an expected call of GetQouteRetweetJoin.
func (mr *MockPostgresStoreMockRecorder) GetQouteRetweetJoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQouteRetweetJoin", reflect.TypeOf((*MockPostgresStore)(nil).GetQouteRetweetJoin), arg0, arg1)
}

// GetQouteRetweetRows mocks base method.
func (m *MockPostgresStore) GetQouteRetweetRows(arg0 context.Context, arg1 db.GetQouteRetweetRowsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQouteRetweetRows", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQouteRetweetRows indicates an expected call of GetQouteRetweetRows.
func (mr *MockPostgresStoreMockRecorder) GetQouteRetweetRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQouteRetweetRows", reflect.TypeOf((*MockPostgresStore)(nil).GetQouteRetweetRows), arg0, arg1)
}

// GetQueueRows mocks base method.
func (m *MockPostgresStore) GetQueueRows(arg0 context.Context, arg1 db.GetQueueRowsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueRows", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueRows indicates an expected call of GetQueueRows.
func (mr *MockPostgresStoreMockRecorder) GetQueueRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueRows", reflect.TypeOf((*MockPostgresStore)(nil).GetQueueRows), arg0, arg1)
}

// GetRetweet mocks base method.
func (m *MockPostgresStore) GetRetweet(arg0 context.Context, arg1 db.GetRetweetParams) (db.RetweetFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetweet", arg0, arg1)
	ret0, _ := ret[0].(db.RetweetFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetweet indicates an expected call of GetRetweet.
func (mr *MockPostgresStoreMockRecorder) GetRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetweet", reflect.TypeOf((*MockPostgresStore)(nil).GetRetweet), arg0, arg1)
}

// GetRetweetJoin mocks base method.
func (m *MockPostgresStore) GetRetweetJoin(arg0 context.Context, arg1 db.GetRetweetJoinParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetweetJoin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetweetJoin indicates an expected call of GetRetweetJoin.
func (mr *MockPostgresStoreMockRecorder) GetRetweetJoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetweetJoin", reflect.TypeOf((*MockPostgresStore)(nil).GetRetweetJoin), arg0, arg1)
}

// GetRetweetRows mocks base method.
func (m *MockPostgresStore) GetRetweetRows(arg0 context.Context, arg1 db.GetRetweetRowsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetweetRows", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetweetRows indicates an expected call of GetRetweetRows.
func (mr *MockPostgresStoreMockRecorder) GetRetweetRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetweetRows", reflect.TypeOf((*MockPostgresStore)(nil).GetRetweetRows), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockPostgresStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockPostgresStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockPostgresStore)(nil).GetSession), arg0, arg1)
}

// GetSessionuser mocks base method.
func (m *MockPostgresStore) GetSessionuser(arg0 context.Context, arg1 string) (db.GetSessionuserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionuser", arg0, arg1)
	ret0, _ := ret[0].(db.GetSessionuserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionuser indicates an expected call of GetSessionuser.
func (mr *MockPostgresStoreMockRecorder) GetSessionuser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionuser", reflect.TypeOf((*MockPostgresStore)(nil).GetSessionuser), arg0, arg1)
}

// GetToken mocks base method.
func (m *MockPostgresStore) GetToken(arg0 context.Context, arg1 string) (*ent.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1)
	ret0, _ := ret[0].(*ent.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockPostgresStoreMockRecorder) GetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockPostgresStore)(nil).GetToken), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockPostgresStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockPostgresStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPostgresStore)(nil).GetUser), arg0, arg1)
}

// IsTokenExist mocks base method.
func (m *MockPostgresStore) IsTokenExist(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenExist indicates an expected call of IsTokenExist.
func (mr *MockPostgresStoreMockRecorder) IsTokenExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenExist", reflect.TypeOf((*MockPostgresStore)(nil).IsTokenExist), arg0, arg1)
}

// IsUserExist mocks base method.
func (m *MockPostgresStore) IsUserExist(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockPostgresStoreMockRecorder) IsUserExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockPostgresStore)(nil).IsUserExist), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockPostgresStore) ListAccounts(arg0 context.Context, arg1 db.ListAccountsParams) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockPostgresStoreMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockPostgresStore)(nil).ListAccounts), arg0, arg1)
}

// ListComment mocks base method.
func (m *MockPostgresStore) ListComment(arg0 context.Context, arg1 db.ListCommentParams) ([]db.ListCommentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComment", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCommentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComment indicates an expected call of ListComment.
func (mr *MockPostgresStoreMockRecorder) ListComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComment", reflect.TypeOf((*MockPostgresStore)(nil).ListComment), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockPostgresStore) ListEntries(arg0 context.Context, arg1 db.ListEntriesParams) ([]db.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockPostgresStoreMockRecorder) ListEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockPostgresStore)(nil).ListEntries), arg0, arg1)
}

// ListPost mocks base method.
func (m *MockPostgresStore) ListPost(arg0 context.Context, arg1 db.ListPostParams) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPost", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPost indicates an expected call of ListPost.
func (mr *MockPostgresStoreMockRecorder) ListPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPost", reflect.TypeOf((*MockPostgresStore)(nil).ListPost), arg0, arg1)
}

// ListQueue mocks base method.
func (m *MockPostgresStore) ListQueue(arg0 context.Context, arg1 db.ListQueueParams) ([]db.ListQueueRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueue", arg0, arg1)
	ret0, _ := ret[0].([]db.ListQueueRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueue indicates an expected call of ListQueue.
func (mr *MockPostgresStoreMockRecorder) ListQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueue", reflect.TypeOf((*MockPostgresStore)(nil).ListQueue), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockPostgresStore) ListUser(arg0 context.Context, arg1 db.ListUserParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockPostgresStoreMockRecorder) ListUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockPostgresStore)(nil).ListUser), arg0, arg1)
}

// PrivateAccount mocks base method.
func (m *MockPostgresStore) PrivateAccount(arg0 context.Context, arg1 db.PrivateAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrivateAccount indicates an expected call of PrivateAccount.
func (mr *MockPostgresStoreMockRecorder) PrivateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateAccount", reflect.TypeOf((*MockPostgresStore)(nil).PrivateAccount), arg0, arg1)
}

// SetAccount mocks base method.
func (m *MockPostgresStore) SetAccount(arg0 context.Context, arg1 *account.AccountParam) (*ent.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", arg0, arg1)
	ret0, _ := ret[0].(*ent.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockPostgresStoreMockRecorder) SetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockPostgresStore)(nil).SetAccount), arg0, arg1)
}

// SetPassword mocks base method.
func (m *MockPostgresStore) SetPassword(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockPostgresStoreMockRecorder) SetPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockPostgresStore)(nil).SetPassword), arg0, arg1, arg2)
}

// SetToken mocks base method.
func (m *MockPostgresStore) SetToken(arg0 context.Context, arg1 *tokens.TokensParams) (*ent.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", arg0, arg1)
	ret0, _ := ret[0].(*ent.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToken indicates an expected call of SetToken.
func (mr *MockPostgresStoreMockRecorder) SetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockPostgresStore)(nil).SetToken), arg0, arg1)
}

// SetUser mocks base method.
func (m *MockPostgresStore) SetUser(arg0 context.Context, arg1 *users.UsersParam) (*ent.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", arg0, arg1)
	ret0, _ := ret[0].(*ent.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockPostgresStoreMockRecorder) SetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockPostgresStore)(nil).SetUser), arg0, arg1)
}

// SetUsersOauth mocks base method.
func (m *MockPostgresStore) SetUsersOauth(arg0 context.Context, arg1 *params.CreateUsersOauthParam) (*tx.OauthUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUsersOauth", arg0, arg1)
	ret0, _ := ret[0].(*tx.OauthUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUsersOauth indicates an expected call of SetUsersOauth.
func (mr *MockPostgresStoreMockRecorder) SetUsersOauth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsersOauth", reflect.TypeOf((*MockPostgresStore)(nil).SetUsersOauth), arg0, arg1)
}

// UnFollowtx mocks base method.
func (m *MockPostgresStore) UnFollowtx(arg0 context.Context, arg1 db.UnfollowTXParam) (db.UnFollowTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnFollowtx", arg0, arg1)
	ret0, _ := ret[0].(db.UnFollowTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnFollowtx indicates an expected call of UnFollowtx.
func (mr *MockPostgresStoreMockRecorder) UnFollowtx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnFollowtx", reflect.TypeOf((*MockPostgresStore)(nil).UnFollowtx), arg0, arg1)
}

// UnlikeTX mocks base method.
func (m *MockPostgresStore) UnlikeTX(arg0 context.Context, arg1 db.CreateLikeParams) (db.CreateLikeTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeTX", arg0, arg1)
	ret0, _ := ret[0].(db.CreateLikeTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikeTX indicates an expected call of UnlikeTX.
func (mr *MockPostgresStoreMockRecorder) UnlikeTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeTX", reflect.TypeOf((*MockPostgresStore)(nil).UnlikeTX), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockPostgresStore) UpdateAccount(arg0 context.Context, arg1 *account.AccountParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockPostgresStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockPostgresStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateAccountFollower mocks base method.
func (m *MockPostgresStore) UpdateAccountFollower(arg0 context.Context, arg1 db.UpdateAccountFollowerParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountFollower", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountFollower indicates an expected call of UpdateAccountFollower.
func (mr *MockPostgresStoreMockRecorder) UpdateAccountFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountFollower", reflect.TypeOf((*MockPostgresStore)(nil).UpdateAccountFollower), arg0, arg1)
}

// UpdateAccountFollowing mocks base method.
func (m *MockPostgresStore) UpdateAccountFollowing(arg0 context.Context, arg1 db.UpdateAccountFollowingParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountFollowing", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountFollowing indicates an expected call of UpdateAccountFollowing.
func (mr *MockPostgresStoreMockRecorder) UpdateAccountFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountFollowing", reflect.TypeOf((*MockPostgresStore)(nil).UpdateAccountFollowing), arg0, arg1)
}

// UpdateAccountQueue mocks base method.
func (m *MockPostgresStore) UpdateAccountQueue(arg0 context.Context, arg1 db.UpdateAccountQueueParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountQueue indicates an expected call of UpdateAccountQueue.
func (mr *MockPostgresStoreMockRecorder) UpdateAccountQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountQueue", reflect.TypeOf((*MockPostgresStore)(nil).UpdateAccountQueue), arg0, arg1)
}

// UpdateLike mocks base method.
func (m *MockPostgresStore) UpdateLike(arg0 context.Context, arg1 db.UpdateLikeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLike indicates an expected call of UpdateLike.
func (mr *MockPostgresStoreMockRecorder) UpdateLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLike", reflect.TypeOf((*MockPostgresStore)(nil).UpdateLike), arg0, arg1)
}

// UpdatePhoto mocks base method.
func (m *MockPostgresStore) UpdatePhoto(arg0 context.Context, arg1 db.UpdatePhotoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhoto indicates an expected call of UpdatePhoto.
func (mr *MockPostgresStoreMockRecorder) UpdatePhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockPostgresStore)(nil).UpdatePhoto), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockPostgresStore) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostgresStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostgresStore)(nil).UpdatePost), arg0, arg1)
}

// UpdatePost_feature mocks base method.
func (m *MockPostgresStore) UpdatePost_feature(arg0 context.Context, arg1 db.UpdatePost_featureParams) (db.PostFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost_feature", arg0, arg1)
	ret0, _ := ret[0].(db.PostFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost_feature indicates an expected call of UpdatePost_feature.
func (mr *MockPostgresStoreMockRecorder) UpdatePost_feature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost_feature", reflect.TypeOf((*MockPostgresStore)(nil).UpdatePost_feature), arg0, arg1)
}

// UpdateQouteRetweet mocks base method.
func (m *MockPostgresStore) UpdateQouteRetweet(arg0 context.Context, arg1 db.UpdateQouteRetweetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQouteRetweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQouteRetweet indicates an expected call of UpdateQouteRetweet.
func (mr *MockPostgresStoreMockRecorder) UpdateQouteRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQouteRetweet", reflect.TypeOf((*MockPostgresStore)(nil).UpdateQouteRetweet), arg0, arg1)
}

// UpdateRetweet mocks base method.
func (m *MockPostgresStore) UpdateRetweet(arg0 context.Context, arg1 db.UpdateRetweetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetweet indicates an expected call of UpdateRetweet.
func (mr *MockPostgresStoreMockRecorder) UpdateRetweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetweet", reflect.TypeOf((*MockPostgresStore)(nil).UpdateRetweet), arg0, arg1)
}

// UpdateToken mocks base method.
func (m *MockPostgresStore) UpdateToken(arg0 context.Context, arg1 *tokens.TokensParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockPostgresStoreMockRecorder) UpdateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockPostgresStore)(nil).UpdateToken), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockPostgresStore) UpdateUser(arg0 context.Context, arg1 *users.UsersParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockPostgresStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockPostgresStore)(nil).UpdateUser), arg0, arg1)
}
