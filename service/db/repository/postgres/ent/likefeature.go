// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/likefeature"
)

// LikeFeature is the model entity for the LikeFeature schema.
type LikeFeature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromAccountID holds the value of the "from_account_id" field.
	FromAccountID int64 `json:"from_account_id,omitempty"`
	// IsLike holds the value of the "is_like" field.
	IsLike bool `json:"is_like,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID uuid.UUID `json:"post_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LikeFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case likefeature.FieldIsLike:
			values[i] = new(sql.NullBool)
		case likefeature.FieldID, likefeature.FieldFromAccountID:
			values[i] = new(sql.NullInt64)
		case likefeature.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case likefeature.FieldPostID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LikeFeature", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LikeFeature fields.
func (lf *LikeFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likefeature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lf.ID = int(value.Int64)
		case likefeature.FieldFromAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_account_id", values[i])
			} else if value.Valid {
				lf.FromAccountID = value.Int64
			}
		case likefeature.FieldIsLike:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_like", values[i])
			} else if value.Valid {
				lf.IsLike = value.Bool
			}
		case likefeature.FieldPostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value != nil {
				lf.PostID = *value
			}
		case likefeature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lf.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LikeFeature.
// Note that you need to call LikeFeature.Unwrap() before calling this method if this LikeFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (lf *LikeFeature) Update() *LikeFeatureUpdateOne {
	return (&LikeFeatureClient{config: lf.config}).UpdateOne(lf)
}

// Unwrap unwraps the LikeFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lf *LikeFeature) Unwrap() *LikeFeature {
	_tx, ok := lf.config.driver.(*txDriver)
	if !ok {
		panic("ent: LikeFeature is not a transactional entity")
	}
	lf.config.driver = _tx.drv
	return lf
}

// String implements the fmt.Stringer.
func (lf *LikeFeature) String() string {
	var builder strings.Builder
	builder.WriteString("LikeFeature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lf.ID))
	builder.WriteString("from_account_id=")
	builder.WriteString(fmt.Sprintf("%v", lf.FromAccountID))
	builder.WriteString(", ")
	builder.WriteString("is_like=")
	builder.WriteString(fmt.Sprintf("%v", lf.IsLike))
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", lf.PostID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LikeFeatures is a parsable slice of LikeFeature.
type LikeFeatures []*LikeFeature

func (lf LikeFeatures) config(cfg config) {
	for _i := range lf {
		lf[_i].config = cfg
	}
}
