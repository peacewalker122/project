// Code generated by ent, DO NOT EDIT.

package notifread

import (
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NotifID applies equality check predicate on the "notif_id" field. It's identical to NotifIDEQ.
func NotifID(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// ReadAt applies equality check predicate on the "read_at" field. It's identical to ReadAtEQ.
func ReadAt(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadAt), v))
	})
}

// NotifIDEQ applies the EQ predicate on the "notif_id" field.
func NotifIDEQ(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifID), v))
	})
}

// NotifIDNEQ applies the NEQ predicate on the "notif_id" field.
func NotifIDNEQ(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotifID), v))
	})
}

// NotifIDIn applies the In predicate on the "notif_id" field.
func NotifIDIn(vs ...uuid.UUID) predicate.NotifRead {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotifID), v...))
	})
}

// NotifIDNotIn applies the NotIn predicate on the "notif_id" field.
func NotifIDNotIn(vs ...uuid.UUID) predicate.NotifRead {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotifID), v...))
	})
}

// NotifIDGT applies the GT predicate on the "notif_id" field.
func NotifIDGT(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotifID), v))
	})
}

// NotifIDGTE applies the GTE predicate on the "notif_id" field.
func NotifIDGTE(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotifID), v))
	})
}

// NotifIDLT applies the LT predicate on the "notif_id" field.
func NotifIDLT(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotifID), v))
	})
}

// NotifIDLTE applies the LTE predicate on the "notif_id" field.
func NotifIDLTE(v uuid.UUID) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotifID), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int64) predicate.NotifRead {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int64) predicate.NotifRead {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int64) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// ReadAtEQ applies the EQ predicate on the "read_at" field.
func ReadAtEQ(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadAt), v))
	})
}

// ReadAtNEQ applies the NEQ predicate on the "read_at" field.
func ReadAtNEQ(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReadAt), v))
	})
}

// ReadAtIn applies the In predicate on the "read_at" field.
func ReadAtIn(vs ...time.Time) predicate.NotifRead {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReadAt), v...))
	})
}

// ReadAtNotIn applies the NotIn predicate on the "read_at" field.
func ReadAtNotIn(vs ...time.Time) predicate.NotifRead {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReadAt), v...))
	})
}

// ReadAtGT applies the GT predicate on the "read_at" field.
func ReadAtGT(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReadAt), v))
	})
}

// ReadAtGTE applies the GTE predicate on the "read_at" field.
func ReadAtGTE(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReadAt), v))
	})
}

// ReadAtLT applies the LT predicate on the "read_at" field.
func ReadAtLT(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReadAt), v))
	})
}

// ReadAtLTE applies the LTE predicate on the "read_at" field.
func ReadAtLTE(v time.Time) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReadAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotifRead) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotifRead) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotifRead) predicate.NotifRead {
	return predicate.NotifRead(func(s *sql.Selector) {
		p(s.Not())
	})
}
