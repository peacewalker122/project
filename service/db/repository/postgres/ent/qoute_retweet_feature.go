// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/qoute_retweet_feature"
)

// Qoute_retweet_feature is the model entity for the Qoute_retweet_feature schema.
type Qoute_retweet_feature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FromAccountID holds the value of the "from_account_id" field.
	FromAccountID int64 `json:"from_account_id,omitempty"`
	// QouteRetweet holds the value of the "qoute_retweet" field.
	QouteRetweet bool `json:"qoute_retweet,omitempty"`
	// Qoute holds the value of the "qoute" field.
	Qoute string `json:"qoute,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID uuid.UUID `json:"post_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Qoute_retweet_feature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case qoute_retweet_feature.FieldQouteRetweet:
			values[i] = new(sql.NullBool)
		case qoute_retweet_feature.FieldID, qoute_retweet_feature.FieldFromAccountID:
			values[i] = new(sql.NullInt64)
		case qoute_retweet_feature.FieldQoute:
			values[i] = new(sql.NullString)
		case qoute_retweet_feature.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case qoute_retweet_feature.FieldPostID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Qoute_retweet_feature", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Qoute_retweet_feature fields.
func (qrf *Qoute_retweet_feature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case qoute_retweet_feature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qrf.ID = int(value.Int64)
		case qoute_retweet_feature.FieldFromAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_account_id", values[i])
			} else if value.Valid {
				qrf.FromAccountID = value.Int64
			}
		case qoute_retweet_feature.FieldQouteRetweet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field qoute_retweet", values[i])
			} else if value.Valid {
				qrf.QouteRetweet = value.Bool
			}
		case qoute_retweet_feature.FieldQoute:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qoute", values[i])
			} else if value.Valid {
				qrf.Qoute = value.String
			}
		case qoute_retweet_feature.FieldPostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value != nil {
				qrf.PostID = *value
			}
		case qoute_retweet_feature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qrf.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Qoute_retweet_feature.
// Note that you need to call Qoute_retweet_feature.Unwrap() before calling this method if this Qoute_retweet_feature
// was returned from a transaction, and the transaction was committed or rolled back.
func (qrf *Qoute_retweet_feature) Update() *QouteRetweetFeatureUpdateOne {
	return (&Qoute_retweet_featureClient{config: qrf.config}).UpdateOne(qrf)
}

// Unwrap unwraps the Qoute_retweet_feature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qrf *Qoute_retweet_feature) Unwrap() *Qoute_retweet_feature {
	_tx, ok := qrf.config.driver.(*txDriver)
	if !ok {
		panic("ent: Qoute_retweet_feature is not a transactional entity")
	}
	qrf.config.driver = _tx.drv
	return qrf
}

// String implements the fmt.Stringer.
func (qrf *Qoute_retweet_feature) String() string {
	var builder strings.Builder
	builder.WriteString("Qoute_retweet_feature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qrf.ID))
	builder.WriteString("from_account_id=")
	builder.WriteString(fmt.Sprintf("%v", qrf.FromAccountID))
	builder.WriteString(", ")
	builder.WriteString("qoute_retweet=")
	builder.WriteString(fmt.Sprintf("%v", qrf.QouteRetweet))
	builder.WriteString(", ")
	builder.WriteString("qoute=")
	builder.WriteString(qrf.Qoute)
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", qrf.PostID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(qrf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Qoute_retweet_features is a parsable slice of Qoute_retweet_feature.
type Qoute_retweet_features []*Qoute_retweet_feature

func (qrf Qoute_retweet_features) config(cfg config) {
	for _i := range qrf {
		qrf[_i].config = cfg
	}
}
