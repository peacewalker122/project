// Code generated by ent, DO NOT EDIT.

package accountnotifs

import (
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// NotifType applies equality check predicate on the "notif_type" field. It's identical to NotifTypeEQ.
func NotifType(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifType), v))
	})
}

// NotifTitle applies equality check predicate on the "notif_title" field. It's identical to NotifTitleEQ.
func NotifTitle(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifTitle), v))
	})
}

// NotifContent applies equality check predicate on the "notif_content" field. It's identical to NotifContentEQ.
func NotifContent(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifContent), v))
	})
}

// NotifTime applies equality check predicate on the "notif_time" field. It's identical to NotifTimeEQ.
func NotifTime(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifTime), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int64) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int64) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int64) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDIsNil applies the IsNil predicate on the "account_id" field.
func AccountIDIsNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountID)))
	})
}

// AccountIDNotNil applies the NotNil predicate on the "account_id" field.
func AccountIDNotNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountID)))
	})
}

// NotifTypeEQ applies the EQ predicate on the "notif_type" field.
func NotifTypeEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifType), v))
	})
}

// NotifTypeNEQ applies the NEQ predicate on the "notif_type" field.
func NotifTypeNEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotifType), v))
	})
}

// NotifTypeIn applies the In predicate on the "notif_type" field.
func NotifTypeIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotifType), v...))
	})
}

// NotifTypeNotIn applies the NotIn predicate on the "notif_type" field.
func NotifTypeNotIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotifType), v...))
	})
}

// NotifTypeGT applies the GT predicate on the "notif_type" field.
func NotifTypeGT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotifType), v))
	})
}

// NotifTypeGTE applies the GTE predicate on the "notif_type" field.
func NotifTypeGTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotifType), v))
	})
}

// NotifTypeLT applies the LT predicate on the "notif_type" field.
func NotifTypeLT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotifType), v))
	})
}

// NotifTypeLTE applies the LTE predicate on the "notif_type" field.
func NotifTypeLTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotifType), v))
	})
}

// NotifTypeContains applies the Contains predicate on the "notif_type" field.
func NotifTypeContains(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNotifType), v))
	})
}

// NotifTypeHasPrefix applies the HasPrefix predicate on the "notif_type" field.
func NotifTypeHasPrefix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNotifType), v))
	})
}

// NotifTypeHasSuffix applies the HasSuffix predicate on the "notif_type" field.
func NotifTypeHasSuffix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNotifType), v))
	})
}

// NotifTypeEqualFold applies the EqualFold predicate on the "notif_type" field.
func NotifTypeEqualFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNotifType), v))
	})
}

// NotifTypeContainsFold applies the ContainsFold predicate on the "notif_type" field.
func NotifTypeContainsFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNotifType), v))
	})
}

// NotifTitleEQ applies the EQ predicate on the "notif_title" field.
func NotifTitleEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleNEQ applies the NEQ predicate on the "notif_title" field.
func NotifTitleNEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleIn applies the In predicate on the "notif_title" field.
func NotifTitleIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotifTitle), v...))
	})
}

// NotifTitleNotIn applies the NotIn predicate on the "notif_title" field.
func NotifTitleNotIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotifTitle), v...))
	})
}

// NotifTitleGT applies the GT predicate on the "notif_title" field.
func NotifTitleGT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleGTE applies the GTE predicate on the "notif_title" field.
func NotifTitleGTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleLT applies the LT predicate on the "notif_title" field.
func NotifTitleLT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleLTE applies the LTE predicate on the "notif_title" field.
func NotifTitleLTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleContains applies the Contains predicate on the "notif_title" field.
func NotifTitleContains(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleHasPrefix applies the HasPrefix predicate on the "notif_title" field.
func NotifTitleHasPrefix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleHasSuffix applies the HasSuffix predicate on the "notif_title" field.
func NotifTitleHasSuffix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleIsNil applies the IsNil predicate on the "notif_title" field.
func NotifTitleIsNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotifTitle)))
	})
}

// NotifTitleNotNil applies the NotNil predicate on the "notif_title" field.
func NotifTitleNotNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotifTitle)))
	})
}

// NotifTitleEqualFold applies the EqualFold predicate on the "notif_title" field.
func NotifTitleEqualFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNotifTitle), v))
	})
}

// NotifTitleContainsFold applies the ContainsFold predicate on the "notif_title" field.
func NotifTitleContainsFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNotifTitle), v))
	})
}

// NotifContentEQ applies the EQ predicate on the "notif_content" field.
func NotifContentEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifContent), v))
	})
}

// NotifContentNEQ applies the NEQ predicate on the "notif_content" field.
func NotifContentNEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotifContent), v))
	})
}

// NotifContentIn applies the In predicate on the "notif_content" field.
func NotifContentIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotifContent), v...))
	})
}

// NotifContentNotIn applies the NotIn predicate on the "notif_content" field.
func NotifContentNotIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotifContent), v...))
	})
}

// NotifContentGT applies the GT predicate on the "notif_content" field.
func NotifContentGT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotifContent), v))
	})
}

// NotifContentGTE applies the GTE predicate on the "notif_content" field.
func NotifContentGTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotifContent), v))
	})
}

// NotifContentLT applies the LT predicate on the "notif_content" field.
func NotifContentLT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotifContent), v))
	})
}

// NotifContentLTE applies the LTE predicate on the "notif_content" field.
func NotifContentLTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotifContent), v))
	})
}

// NotifContentContains applies the Contains predicate on the "notif_content" field.
func NotifContentContains(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNotifContent), v))
	})
}

// NotifContentHasPrefix applies the HasPrefix predicate on the "notif_content" field.
func NotifContentHasPrefix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNotifContent), v))
	})
}

// NotifContentHasSuffix applies the HasSuffix predicate on the "notif_content" field.
func NotifContentHasSuffix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNotifContent), v))
	})
}

// NotifContentIsNil applies the IsNil predicate on the "notif_content" field.
func NotifContentIsNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotifContent)))
	})
}

// NotifContentNotNil applies the NotNil predicate on the "notif_content" field.
func NotifContentNotNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotifContent)))
	})
}

// NotifContentEqualFold applies the EqualFold predicate on the "notif_content" field.
func NotifContentEqualFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNotifContent), v))
	})
}

// NotifContentContainsFold applies the ContainsFold predicate on the "notif_content" field.
func NotifContentContainsFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNotifContent), v))
	})
}

// NotifTimeEQ applies the EQ predicate on the "notif_time" field.
func NotifTimeEQ(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNotifTime), v))
	})
}

// NotifTimeNEQ applies the NEQ predicate on the "notif_time" field.
func NotifTimeNEQ(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNotifTime), v))
	})
}

// NotifTimeIn applies the In predicate on the "notif_time" field.
func NotifTimeIn(vs ...time.Time) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNotifTime), v...))
	})
}

// NotifTimeNotIn applies the NotIn predicate on the "notif_time" field.
func NotifTimeNotIn(vs ...time.Time) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNotifTime), v...))
	})
}

// NotifTimeGT applies the GT predicate on the "notif_time" field.
func NotifTimeGT(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNotifTime), v))
	})
}

// NotifTimeGTE applies the GTE predicate on the "notif_time" field.
func NotifTimeGTE(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNotifTime), v))
	})
}

// NotifTimeLT applies the LT predicate on the "notif_time" field.
func NotifTimeLT(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNotifTime), v))
	})
}

// NotifTimeLTE applies the LTE predicate on the "notif_time" field.
func NotifTimeLTE(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNotifTime), v))
	})
}

// NotifTimeIsNil applies the IsNil predicate on the "notif_time" field.
func NotifTimeIsNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNotifTime)))
	})
}

// NotifTimeNotNil applies the NotNil predicate on the "notif_time" field.
func NotifTimeNotNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNotifTime)))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsername)))
	})
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsername)))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AccountNotifs {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountNotifs) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountNotifs) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountNotifs) predicate.AccountNotifs {
	return predicate.AccountNotifs(func(s *sql.Selector) {
		p(s.Not())
	})
}
