// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/notifread"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NotifReadUpdate is the builder for updating NotifRead entities.
type NotifReadUpdate struct {
	config
	hooks    []Hook
	mutation *NotifReadMutation
}

// Where appends a list predicates to the NotifReadUpdate builder.
func (nru *NotifReadUpdate) Where(ps ...predicate.NotifRead) *NotifReadUpdate {
	nru.mutation.Where(ps...)
	return nru
}

// SetNotifID sets the "notif_id" field.
func (nru *NotifReadUpdate) SetNotifID(u uuid.UUID) *NotifReadUpdate {
	nru.mutation.SetNotifID(u)
	return nru
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (nru *NotifReadUpdate) SetNillableNotifID(u *uuid.UUID) *NotifReadUpdate {
	if u != nil {
		nru.SetNotifID(*u)
	}
	return nru
}

// SetAccountID sets the "account_id" field.
func (nru *NotifReadUpdate) SetAccountID(i int64) *NotifReadUpdate {
	nru.mutation.ResetAccountID()
	nru.mutation.SetAccountID(i)
	return nru
}

// AddAccountID adds i to the "account_id" field.
func (nru *NotifReadUpdate) AddAccountID(i int64) *NotifReadUpdate {
	nru.mutation.AddAccountID(i)
	return nru
}

// SetReadAt sets the "read_at" field.
func (nru *NotifReadUpdate) SetReadAt(t time.Time) *NotifReadUpdate {
	nru.mutation.SetReadAt(t)
	return nru
}

// Mutation returns the NotifReadMutation object of the builder.
func (nru *NotifReadUpdate) Mutation() *NotifReadMutation {
	return nru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nru *NotifReadUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nru.hooks) == 0 {
		affected, err = nru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifReadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nru.mutation = mutation
			affected, err = nru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nru.hooks) - 1; i >= 0; i-- {
			if nru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nru *NotifReadUpdate) SaveX(ctx context.Context) int {
	affected, err := nru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nru *NotifReadUpdate) Exec(ctx context.Context) error {
	_, err := nru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nru *NotifReadUpdate) ExecX(ctx context.Context) {
	if err := nru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nru *NotifReadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notifread.Table,
			Columns: notifread.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notifread.FieldID,
			},
		},
	}
	if ps := nru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nru.mutation.NotifID(); ok {
		_spec.SetField(notifread.FieldNotifID, field.TypeUUID, value)
	}
	if value, ok := nru.mutation.AccountID(); ok {
		_spec.SetField(notifread.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nru.mutation.AddedAccountID(); ok {
		_spec.AddField(notifread.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nru.mutation.ReadAt(); ok {
		_spec.SetField(notifread.FieldReadAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NotifReadUpdateOne is the builder for updating a single NotifRead entity.
type NotifReadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotifReadMutation
}

// SetNotifID sets the "notif_id" field.
func (nruo *NotifReadUpdateOne) SetNotifID(u uuid.UUID) *NotifReadUpdateOne {
	nruo.mutation.SetNotifID(u)
	return nruo
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (nruo *NotifReadUpdateOne) SetNillableNotifID(u *uuid.UUID) *NotifReadUpdateOne {
	if u != nil {
		nruo.SetNotifID(*u)
	}
	return nruo
}

// SetAccountID sets the "account_id" field.
func (nruo *NotifReadUpdateOne) SetAccountID(i int64) *NotifReadUpdateOne {
	nruo.mutation.ResetAccountID()
	nruo.mutation.SetAccountID(i)
	return nruo
}

// AddAccountID adds i to the "account_id" field.
func (nruo *NotifReadUpdateOne) AddAccountID(i int64) *NotifReadUpdateOne {
	nruo.mutation.AddAccountID(i)
	return nruo
}

// SetReadAt sets the "read_at" field.
func (nruo *NotifReadUpdateOne) SetReadAt(t time.Time) *NotifReadUpdateOne {
	nruo.mutation.SetReadAt(t)
	return nruo
}

// Mutation returns the NotifReadMutation object of the builder.
func (nruo *NotifReadUpdateOne) Mutation() *NotifReadMutation {
	return nruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nruo *NotifReadUpdateOne) Select(field string, fields ...string) *NotifReadUpdateOne {
	nruo.fields = append([]string{field}, fields...)
	return nruo
}

// Save executes the query and returns the updated NotifRead entity.
func (nruo *NotifReadUpdateOne) Save(ctx context.Context) (*NotifRead, error) {
	var (
		err  error
		node *NotifRead
	)
	if len(nruo.hooks) == 0 {
		node, err = nruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifReadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nruo.mutation = mutation
			node, err = nruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nruo.hooks) - 1; i >= 0; i-- {
			if nruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NotifRead)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifReadMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nruo *NotifReadUpdateOne) SaveX(ctx context.Context) *NotifRead {
	node, err := nruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nruo *NotifReadUpdateOne) Exec(ctx context.Context) error {
	_, err := nruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nruo *NotifReadUpdateOne) ExecX(ctx context.Context) {
	if err := nruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nruo *NotifReadUpdateOne) sqlSave(ctx context.Context) (_node *NotifRead, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notifread.Table,
			Columns: notifread.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notifread.FieldID,
			},
		},
	}
	id, ok := nruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotifRead.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notifread.FieldID)
		for _, f := range fields {
			if !notifread.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notifread.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nruo.mutation.NotifID(); ok {
		_spec.SetField(notifread.FieldNotifID, field.TypeUUID, value)
	}
	if value, ok := nruo.mutation.AccountID(); ok {
		_spec.SetField(notifread.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nruo.mutation.AddedAccountID(); ok {
		_spec.AddField(notifread.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nruo.mutation.ReadAt(); ok {
		_spec.SetField(notifread.FieldReadAt, field.TypeTime, value)
	}
	_node = &NotifRead{config: nruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notifread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
