// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/accountnotifs"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountNotifsUpdate is the builder for updating AccountNotifs entities.
type AccountNotifsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountNotifsMutation
}

// Where appends a list predicates to the AccountNotifsUpdate builder.
func (anu *AccountNotifsUpdate) Where(ps ...predicate.AccountNotifs) *AccountNotifsUpdate {
	anu.mutation.Where(ps...)
	return anu
}

// SetAccountID sets the "account_id" field.
func (anu *AccountNotifsUpdate) SetAccountID(i int64) *AccountNotifsUpdate {
	anu.mutation.ResetAccountID()
	anu.mutation.SetAccountID(i)
	return anu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (anu *AccountNotifsUpdate) SetNillableAccountID(i *int64) *AccountNotifsUpdate {
	if i != nil {
		anu.SetAccountID(*i)
	}
	return anu
}

// AddAccountID adds i to the "account_id" field.
func (anu *AccountNotifsUpdate) AddAccountID(i int64) *AccountNotifsUpdate {
	anu.mutation.AddAccountID(i)
	return anu
}

// ClearAccountID clears the value of the "account_id" field.
func (anu *AccountNotifsUpdate) ClearAccountID() *AccountNotifsUpdate {
	anu.mutation.ClearAccountID()
	return anu
}

// SetNotifType sets the "notif_type" field.
func (anu *AccountNotifsUpdate) SetNotifType(s string) *AccountNotifsUpdate {
	anu.mutation.SetNotifType(s)
	return anu
}

// SetNotifTitle sets the "notif_title" field.
func (anu *AccountNotifsUpdate) SetNotifTitle(s string) *AccountNotifsUpdate {
	anu.mutation.SetNotifTitle(s)
	return anu
}

// SetNillableNotifTitle sets the "notif_title" field if the given value is not nil.
func (anu *AccountNotifsUpdate) SetNillableNotifTitle(s *string) *AccountNotifsUpdate {
	if s != nil {
		anu.SetNotifTitle(*s)
	}
	return anu
}

// ClearNotifTitle clears the value of the "notif_title" field.
func (anu *AccountNotifsUpdate) ClearNotifTitle() *AccountNotifsUpdate {
	anu.mutation.ClearNotifTitle()
	return anu
}

// SetNotifContent sets the "notif_content" field.
func (anu *AccountNotifsUpdate) SetNotifContent(s string) *AccountNotifsUpdate {
	anu.mutation.SetNotifContent(s)
	return anu
}

// SetNillableNotifContent sets the "notif_content" field if the given value is not nil.
func (anu *AccountNotifsUpdate) SetNillableNotifContent(s *string) *AccountNotifsUpdate {
	if s != nil {
		anu.SetNotifContent(*s)
	}
	return anu
}

// ClearNotifContent clears the value of the "notif_content" field.
func (anu *AccountNotifsUpdate) ClearNotifContent() *AccountNotifsUpdate {
	anu.mutation.ClearNotifContent()
	return anu
}

// SetNotifTime sets the "notif_time" field.
func (anu *AccountNotifsUpdate) SetNotifTime(t time.Time) *AccountNotifsUpdate {
	anu.mutation.SetNotifTime(t)
	return anu
}

// SetNillableNotifTime sets the "notif_time" field if the given value is not nil.
func (anu *AccountNotifsUpdate) SetNillableNotifTime(t *time.Time) *AccountNotifsUpdate {
	if t != nil {
		anu.SetNotifTime(*t)
	}
	return anu
}

// ClearNotifTime clears the value of the "notif_time" field.
func (anu *AccountNotifsUpdate) ClearNotifTime() *AccountNotifsUpdate {
	anu.mutation.ClearNotifTime()
	return anu
}

// SetUsername sets the "username" field.
func (anu *AccountNotifsUpdate) SetUsername(s string) *AccountNotifsUpdate {
	anu.mutation.SetUsername(s)
	return anu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (anu *AccountNotifsUpdate) SetNillableUsername(s *string) *AccountNotifsUpdate {
	if s != nil {
		anu.SetUsername(*s)
	}
	return anu
}

// ClearUsername clears the value of the "username" field.
func (anu *AccountNotifsUpdate) ClearUsername() *AccountNotifsUpdate {
	anu.mutation.ClearUsername()
	return anu
}

// SetCreatedAt sets the "created_at" field.
func (anu *AccountNotifsUpdate) SetCreatedAt(t time.Time) *AccountNotifsUpdate {
	anu.mutation.SetCreatedAt(t)
	return anu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (anu *AccountNotifsUpdate) SetNillableCreatedAt(t *time.Time) *AccountNotifsUpdate {
	if t != nil {
		anu.SetCreatedAt(*t)
	}
	return anu
}

// Mutation returns the AccountNotifsMutation object of the builder.
func (anu *AccountNotifsUpdate) Mutation() *AccountNotifsMutation {
	return anu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (anu *AccountNotifsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(anu.hooks) == 0 {
		if err = anu.check(); err != nil {
			return 0, err
		}
		affected, err = anu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountNotifsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = anu.check(); err != nil {
				return 0, err
			}
			anu.mutation = mutation
			affected, err = anu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(anu.hooks) - 1; i >= 0; i-- {
			if anu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = anu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, anu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (anu *AccountNotifsUpdate) SaveX(ctx context.Context) int {
	affected, err := anu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (anu *AccountNotifsUpdate) Exec(ctx context.Context) error {
	_, err := anu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anu *AccountNotifsUpdate) ExecX(ctx context.Context) {
	if err := anu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anu *AccountNotifsUpdate) check() error {
	if v, ok := anu.mutation.NotifType(); ok {
		if err := accountnotifs.NotifTypeValidator(v); err != nil {
			return &ValidationError{Name: "notif_type", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_type": %w`, err)}
		}
	}
	if v, ok := anu.mutation.NotifTitle(); ok {
		if err := accountnotifs.NotifTitleValidator(v); err != nil {
			return &ValidationError{Name: "notif_title", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_title": %w`, err)}
		}
	}
	if v, ok := anu.mutation.NotifContent(); ok {
		if err := accountnotifs.NotifContentValidator(v); err != nil {
			return &ValidationError{Name: "notif_content", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_content": %w`, err)}
		}
	}
	if v, ok := anu.mutation.Username(); ok {
		if err := accountnotifs.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.username": %w`, err)}
		}
	}
	return nil
}

func (anu *AccountNotifsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountnotifs.Table,
			Columns: accountnotifs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: accountnotifs.FieldID,
			},
		},
	}
	if ps := anu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anu.mutation.AccountID(); ok {
		_spec.SetField(accountnotifs.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := anu.mutation.AddedAccountID(); ok {
		_spec.AddField(accountnotifs.FieldAccountID, field.TypeInt64, value)
	}
	if anu.mutation.AccountIDCleared() {
		_spec.ClearField(accountnotifs.FieldAccountID, field.TypeInt64)
	}
	if value, ok := anu.mutation.NotifType(); ok {
		_spec.SetField(accountnotifs.FieldNotifType, field.TypeString, value)
	}
	if value, ok := anu.mutation.NotifTitle(); ok {
		_spec.SetField(accountnotifs.FieldNotifTitle, field.TypeString, value)
	}
	if anu.mutation.NotifTitleCleared() {
		_spec.ClearField(accountnotifs.FieldNotifTitle, field.TypeString)
	}
	if value, ok := anu.mutation.NotifContent(); ok {
		_spec.SetField(accountnotifs.FieldNotifContent, field.TypeString, value)
	}
	if anu.mutation.NotifContentCleared() {
		_spec.ClearField(accountnotifs.FieldNotifContent, field.TypeString)
	}
	if value, ok := anu.mutation.NotifTime(); ok {
		_spec.SetField(accountnotifs.FieldNotifTime, field.TypeTime, value)
	}
	if anu.mutation.NotifTimeCleared() {
		_spec.ClearField(accountnotifs.FieldNotifTime, field.TypeTime)
	}
	if value, ok := anu.mutation.Username(); ok {
		_spec.SetField(accountnotifs.FieldUsername, field.TypeString, value)
	}
	if anu.mutation.UsernameCleared() {
		_spec.ClearField(accountnotifs.FieldUsername, field.TypeString)
	}
	if value, ok := anu.mutation.CreatedAt(); ok {
		_spec.SetField(accountnotifs.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, anu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountnotifs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AccountNotifsUpdateOne is the builder for updating a single AccountNotifs entity.
type AccountNotifsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountNotifsMutation
}

// SetAccountID sets the "account_id" field.
func (anuo *AccountNotifsUpdateOne) SetAccountID(i int64) *AccountNotifsUpdateOne {
	anuo.mutation.ResetAccountID()
	anuo.mutation.SetAccountID(i)
	return anuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (anuo *AccountNotifsUpdateOne) SetNillableAccountID(i *int64) *AccountNotifsUpdateOne {
	if i != nil {
		anuo.SetAccountID(*i)
	}
	return anuo
}

// AddAccountID adds i to the "account_id" field.
func (anuo *AccountNotifsUpdateOne) AddAccountID(i int64) *AccountNotifsUpdateOne {
	anuo.mutation.AddAccountID(i)
	return anuo
}

// ClearAccountID clears the value of the "account_id" field.
func (anuo *AccountNotifsUpdateOne) ClearAccountID() *AccountNotifsUpdateOne {
	anuo.mutation.ClearAccountID()
	return anuo
}

// SetNotifType sets the "notif_type" field.
func (anuo *AccountNotifsUpdateOne) SetNotifType(s string) *AccountNotifsUpdateOne {
	anuo.mutation.SetNotifType(s)
	return anuo
}

// SetNotifTitle sets the "notif_title" field.
func (anuo *AccountNotifsUpdateOne) SetNotifTitle(s string) *AccountNotifsUpdateOne {
	anuo.mutation.SetNotifTitle(s)
	return anuo
}

// SetNillableNotifTitle sets the "notif_title" field if the given value is not nil.
func (anuo *AccountNotifsUpdateOne) SetNillableNotifTitle(s *string) *AccountNotifsUpdateOne {
	if s != nil {
		anuo.SetNotifTitle(*s)
	}
	return anuo
}

// ClearNotifTitle clears the value of the "notif_title" field.
func (anuo *AccountNotifsUpdateOne) ClearNotifTitle() *AccountNotifsUpdateOne {
	anuo.mutation.ClearNotifTitle()
	return anuo
}

// SetNotifContent sets the "notif_content" field.
func (anuo *AccountNotifsUpdateOne) SetNotifContent(s string) *AccountNotifsUpdateOne {
	anuo.mutation.SetNotifContent(s)
	return anuo
}

// SetNillableNotifContent sets the "notif_content" field if the given value is not nil.
func (anuo *AccountNotifsUpdateOne) SetNillableNotifContent(s *string) *AccountNotifsUpdateOne {
	if s != nil {
		anuo.SetNotifContent(*s)
	}
	return anuo
}

// ClearNotifContent clears the value of the "notif_content" field.
func (anuo *AccountNotifsUpdateOne) ClearNotifContent() *AccountNotifsUpdateOne {
	anuo.mutation.ClearNotifContent()
	return anuo
}

// SetNotifTime sets the "notif_time" field.
func (anuo *AccountNotifsUpdateOne) SetNotifTime(t time.Time) *AccountNotifsUpdateOne {
	anuo.mutation.SetNotifTime(t)
	return anuo
}

// SetNillableNotifTime sets the "notif_time" field if the given value is not nil.
func (anuo *AccountNotifsUpdateOne) SetNillableNotifTime(t *time.Time) *AccountNotifsUpdateOne {
	if t != nil {
		anuo.SetNotifTime(*t)
	}
	return anuo
}

// ClearNotifTime clears the value of the "notif_time" field.
func (anuo *AccountNotifsUpdateOne) ClearNotifTime() *AccountNotifsUpdateOne {
	anuo.mutation.ClearNotifTime()
	return anuo
}

// SetUsername sets the "username" field.
func (anuo *AccountNotifsUpdateOne) SetUsername(s string) *AccountNotifsUpdateOne {
	anuo.mutation.SetUsername(s)
	return anuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (anuo *AccountNotifsUpdateOne) SetNillableUsername(s *string) *AccountNotifsUpdateOne {
	if s != nil {
		anuo.SetUsername(*s)
	}
	return anuo
}

// ClearUsername clears the value of the "username" field.
func (anuo *AccountNotifsUpdateOne) ClearUsername() *AccountNotifsUpdateOne {
	anuo.mutation.ClearUsername()
	return anuo
}

// SetCreatedAt sets the "created_at" field.
func (anuo *AccountNotifsUpdateOne) SetCreatedAt(t time.Time) *AccountNotifsUpdateOne {
	anuo.mutation.SetCreatedAt(t)
	return anuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (anuo *AccountNotifsUpdateOne) SetNillableCreatedAt(t *time.Time) *AccountNotifsUpdateOne {
	if t != nil {
		anuo.SetCreatedAt(*t)
	}
	return anuo
}

// Mutation returns the AccountNotifsMutation object of the builder.
func (anuo *AccountNotifsUpdateOne) Mutation() *AccountNotifsMutation {
	return anuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (anuo *AccountNotifsUpdateOne) Select(field string, fields ...string) *AccountNotifsUpdateOne {
	anuo.fields = append([]string{field}, fields...)
	return anuo
}

// Save executes the query and returns the updated AccountNotifs entity.
func (anuo *AccountNotifsUpdateOne) Save(ctx context.Context) (*AccountNotifs, error) {
	var (
		err  error
		node *AccountNotifs
	)
	if len(anuo.hooks) == 0 {
		if err = anuo.check(); err != nil {
			return nil, err
		}
		node, err = anuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountNotifsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = anuo.check(); err != nil {
				return nil, err
			}
			anuo.mutation = mutation
			node, err = anuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(anuo.hooks) - 1; i >= 0; i-- {
			if anuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = anuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, anuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AccountNotifs)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountNotifsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (anuo *AccountNotifsUpdateOne) SaveX(ctx context.Context) *AccountNotifs {
	node, err := anuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (anuo *AccountNotifsUpdateOne) Exec(ctx context.Context) error {
	_, err := anuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anuo *AccountNotifsUpdateOne) ExecX(ctx context.Context) {
	if err := anuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anuo *AccountNotifsUpdateOne) check() error {
	if v, ok := anuo.mutation.NotifType(); ok {
		if err := accountnotifs.NotifTypeValidator(v); err != nil {
			return &ValidationError{Name: "notif_type", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_type": %w`, err)}
		}
	}
	if v, ok := anuo.mutation.NotifTitle(); ok {
		if err := accountnotifs.NotifTitleValidator(v); err != nil {
			return &ValidationError{Name: "notif_title", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_title": %w`, err)}
		}
	}
	if v, ok := anuo.mutation.NotifContent(); ok {
		if err := accountnotifs.NotifContentValidator(v); err != nil {
			return &ValidationError{Name: "notif_content", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_content": %w`, err)}
		}
	}
	if v, ok := anuo.mutation.Username(); ok {
		if err := accountnotifs.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.username": %w`, err)}
		}
	}
	return nil
}

func (anuo *AccountNotifsUpdateOne) sqlSave(ctx context.Context) (_node *AccountNotifs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountnotifs.Table,
			Columns: accountnotifs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: accountnotifs.FieldID,
			},
		},
	}
	id, ok := anuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountNotifs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := anuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountnotifs.FieldID)
		for _, f := range fields {
			if !accountnotifs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountnotifs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := anuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anuo.mutation.AccountID(); ok {
		_spec.SetField(accountnotifs.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := anuo.mutation.AddedAccountID(); ok {
		_spec.AddField(accountnotifs.FieldAccountID, field.TypeInt64, value)
	}
	if anuo.mutation.AccountIDCleared() {
		_spec.ClearField(accountnotifs.FieldAccountID, field.TypeInt64)
	}
	if value, ok := anuo.mutation.NotifType(); ok {
		_spec.SetField(accountnotifs.FieldNotifType, field.TypeString, value)
	}
	if value, ok := anuo.mutation.NotifTitle(); ok {
		_spec.SetField(accountnotifs.FieldNotifTitle, field.TypeString, value)
	}
	if anuo.mutation.NotifTitleCleared() {
		_spec.ClearField(accountnotifs.FieldNotifTitle, field.TypeString)
	}
	if value, ok := anuo.mutation.NotifContent(); ok {
		_spec.SetField(accountnotifs.FieldNotifContent, field.TypeString, value)
	}
	if anuo.mutation.NotifContentCleared() {
		_spec.ClearField(accountnotifs.FieldNotifContent, field.TypeString)
	}
	if value, ok := anuo.mutation.NotifTime(); ok {
		_spec.SetField(accountnotifs.FieldNotifTime, field.TypeTime, value)
	}
	if anuo.mutation.NotifTimeCleared() {
		_spec.ClearField(accountnotifs.FieldNotifTime, field.TypeTime)
	}
	if value, ok := anuo.mutation.Username(); ok {
		_spec.SetField(accountnotifs.FieldUsername, field.TypeString, value)
	}
	if anuo.mutation.UsernameCleared() {
		_spec.ClearField(accountnotifs.FieldUsername, field.TypeString)
	}
	if value, ok := anuo.mutation.CreatedAt(); ok {
		_spec.SetField(accountnotifs.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &AccountNotifs{config: anuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, anuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountnotifs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
