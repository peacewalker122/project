// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/likefeature"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
)

// LikeFeatureUpdate is the builder for updating LikeFeature entities.
type LikeFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *LikeFeatureMutation
}

// Where appends a list predicates to the LikeFeatureUpdate builder.
func (lfu *LikeFeatureUpdate) Where(ps ...predicate.LikeFeature) *LikeFeatureUpdate {
	lfu.mutation.Where(ps...)
	return lfu
}

// SetFromAccountID sets the "from_account_id" field.
func (lfu *LikeFeatureUpdate) SetFromAccountID(i int64) *LikeFeatureUpdate {
	lfu.mutation.ResetFromAccountID()
	lfu.mutation.SetFromAccountID(i)
	return lfu
}

// AddFromAccountID adds i to the "from_account_id" field.
func (lfu *LikeFeatureUpdate) AddFromAccountID(i int64) *LikeFeatureUpdate {
	lfu.mutation.AddFromAccountID(i)
	return lfu
}

// SetIsLike sets the "is_like" field.
func (lfu *LikeFeatureUpdate) SetIsLike(b bool) *LikeFeatureUpdate {
	lfu.mutation.SetIsLike(b)
	return lfu
}

// SetNillableIsLike sets the "is_like" field if the given value is not nil.
func (lfu *LikeFeatureUpdate) SetNillableIsLike(b *bool) *LikeFeatureUpdate {
	if b != nil {
		lfu.SetIsLike(*b)
	}
	return lfu
}

// SetPostID sets the "post_id" field.
func (lfu *LikeFeatureUpdate) SetPostID(u uuid.UUID) *LikeFeatureUpdate {
	lfu.mutation.SetPostID(u)
	return lfu
}

// SetCreatedAt sets the "created_at" field.
func (lfu *LikeFeatureUpdate) SetCreatedAt(t time.Time) *LikeFeatureUpdate {
	lfu.mutation.SetCreatedAt(t)
	return lfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lfu *LikeFeatureUpdate) SetNillableCreatedAt(t *time.Time) *LikeFeatureUpdate {
	if t != nil {
		lfu.SetCreatedAt(*t)
	}
	return lfu
}

// Mutation returns the LikeFeatureMutation object of the builder.
func (lfu *LikeFeatureUpdate) Mutation() *LikeFeatureMutation {
	return lfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lfu *LikeFeatureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lfu.hooks) == 0 {
		affected, err = lfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikeFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lfu.mutation = mutation
			affected, err = lfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lfu.hooks) - 1; i >= 0; i-- {
			if lfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lfu *LikeFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := lfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lfu *LikeFeatureUpdate) Exec(ctx context.Context) error {
	_, err := lfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lfu *LikeFeatureUpdate) ExecX(ctx context.Context) {
	if err := lfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lfu *LikeFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likefeature.Table,
			Columns: likefeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likefeature.FieldID,
			},
		},
	}
	if ps := lfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lfu.mutation.FromAccountID(); ok {
		_spec.SetField(likefeature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := lfu.mutation.AddedFromAccountID(); ok {
		_spec.AddField(likefeature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := lfu.mutation.IsLike(); ok {
		_spec.SetField(likefeature.FieldIsLike, field.TypeBool, value)
	}
	if value, ok := lfu.mutation.PostID(); ok {
		_spec.SetField(likefeature.FieldPostID, field.TypeUUID, value)
	}
	if value, ok := lfu.mutation.CreatedAt(); ok {
		_spec.SetField(likefeature.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likefeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LikeFeatureUpdateOne is the builder for updating a single LikeFeature entity.
type LikeFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikeFeatureMutation
}

// SetFromAccountID sets the "from_account_id" field.
func (lfuo *LikeFeatureUpdateOne) SetFromAccountID(i int64) *LikeFeatureUpdateOne {
	lfuo.mutation.ResetFromAccountID()
	lfuo.mutation.SetFromAccountID(i)
	return lfuo
}

// AddFromAccountID adds i to the "from_account_id" field.
func (lfuo *LikeFeatureUpdateOne) AddFromAccountID(i int64) *LikeFeatureUpdateOne {
	lfuo.mutation.AddFromAccountID(i)
	return lfuo
}

// SetIsLike sets the "is_like" field.
func (lfuo *LikeFeatureUpdateOne) SetIsLike(b bool) *LikeFeatureUpdateOne {
	lfuo.mutation.SetIsLike(b)
	return lfuo
}

// SetNillableIsLike sets the "is_like" field if the given value is not nil.
func (lfuo *LikeFeatureUpdateOne) SetNillableIsLike(b *bool) *LikeFeatureUpdateOne {
	if b != nil {
		lfuo.SetIsLike(*b)
	}
	return lfuo
}

// SetPostID sets the "post_id" field.
func (lfuo *LikeFeatureUpdateOne) SetPostID(u uuid.UUID) *LikeFeatureUpdateOne {
	lfuo.mutation.SetPostID(u)
	return lfuo
}

// SetCreatedAt sets the "created_at" field.
func (lfuo *LikeFeatureUpdateOne) SetCreatedAt(t time.Time) *LikeFeatureUpdateOne {
	lfuo.mutation.SetCreatedAt(t)
	return lfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lfuo *LikeFeatureUpdateOne) SetNillableCreatedAt(t *time.Time) *LikeFeatureUpdateOne {
	if t != nil {
		lfuo.SetCreatedAt(*t)
	}
	return lfuo
}

// Mutation returns the LikeFeatureMutation object of the builder.
func (lfuo *LikeFeatureUpdateOne) Mutation() *LikeFeatureMutation {
	return lfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lfuo *LikeFeatureUpdateOne) Select(field string, fields ...string) *LikeFeatureUpdateOne {
	lfuo.fields = append([]string{field}, fields...)
	return lfuo
}

// Save executes the query and returns the updated LikeFeature entity.
func (lfuo *LikeFeatureUpdateOne) Save(ctx context.Context) (*LikeFeature, error) {
	var (
		err  error
		node *LikeFeature
	)
	if len(lfuo.hooks) == 0 {
		node, err = lfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikeFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lfuo.mutation = mutation
			node, err = lfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lfuo.hooks) - 1; i >= 0; i-- {
			if lfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LikeFeature)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LikeFeatureMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lfuo *LikeFeatureUpdateOne) SaveX(ctx context.Context) *LikeFeature {
	node, err := lfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lfuo *LikeFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := lfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lfuo *LikeFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := lfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lfuo *LikeFeatureUpdateOne) sqlSave(ctx context.Context) (_node *LikeFeature, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likefeature.Table,
			Columns: likefeature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likefeature.FieldID,
			},
		},
	}
	id, ok := lfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LikeFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likefeature.FieldID)
		for _, f := range fields {
			if !likefeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != likefeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lfuo.mutation.FromAccountID(); ok {
		_spec.SetField(likefeature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := lfuo.mutation.AddedFromAccountID(); ok {
		_spec.AddField(likefeature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := lfuo.mutation.IsLike(); ok {
		_spec.SetField(likefeature.FieldIsLike, field.TypeBool, value)
	}
	if value, ok := lfuo.mutation.PostID(); ok {
		_spec.SetField(likefeature.FieldPostID, field.TypeUUID, value)
	}
	if value, ok := lfuo.mutation.CreatedAt(); ok {
		_spec.SetField(likefeature.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &LikeFeature{config: lfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likefeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
