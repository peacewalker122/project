// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/qoute_retweet_feature"
)

// QouteRetweetFeatureUpdate is the builder for updating Qoute_retweet_feature entities.
type QouteRetweetFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *QouteRetweetFeatureMutation
}

// Where appends a list predicates to the QouteRetweetFeatureUpdate builder.
func (qrfu *QouteRetweetFeatureUpdate) Where(ps ...predicate.Qoute_retweet_feature) *QouteRetweetFeatureUpdate {
	qrfu.mutation.Where(ps...)
	return qrfu
}

// SetFromAccountID sets the "from_account_id" field.
func (qrfu *QouteRetweetFeatureUpdate) SetFromAccountID(i int64) *QouteRetweetFeatureUpdate {
	qrfu.mutation.ResetFromAccountID()
	qrfu.mutation.SetFromAccountID(i)
	return qrfu
}

// AddFromAccountID adds i to the "from_account_id" field.
func (qrfu *QouteRetweetFeatureUpdate) AddFromAccountID(i int64) *QouteRetweetFeatureUpdate {
	qrfu.mutation.AddFromAccountID(i)
	return qrfu
}

// SetQouteRetweet sets the "qoute_retweet" field.
func (qrfu *QouteRetweetFeatureUpdate) SetQouteRetweet(b bool) *QouteRetweetFeatureUpdate {
	qrfu.mutation.SetQouteRetweet(b)
	return qrfu
}

// SetNillableQouteRetweet sets the "qoute_retweet" field if the given value is not nil.
func (qrfu *QouteRetweetFeatureUpdate) SetNillableQouteRetweet(b *bool) *QouteRetweetFeatureUpdate {
	if b != nil {
		qrfu.SetQouteRetweet(*b)
	}
	return qrfu
}

// SetQoute sets the "qoute" field.
func (qrfu *QouteRetweetFeatureUpdate) SetQoute(s string) *QouteRetweetFeatureUpdate {
	qrfu.mutation.SetQoute(s)
	return qrfu
}

// SetPostID sets the "post_id" field.
func (qrfu *QouteRetweetFeatureUpdate) SetPostID(u uuid.UUID) *QouteRetweetFeatureUpdate {
	qrfu.mutation.SetPostID(u)
	return qrfu
}

// SetCreatedAt sets the "created_at" field.
func (qrfu *QouteRetweetFeatureUpdate) SetCreatedAt(t time.Time) *QouteRetweetFeatureUpdate {
	qrfu.mutation.SetCreatedAt(t)
	return qrfu
}

// Mutation returns the QouteRetweetFeatureMutation object of the builder.
func (qrfu *QouteRetweetFeatureUpdate) Mutation() *QouteRetweetFeatureMutation {
	return qrfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qrfu *QouteRetweetFeatureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qrfu.hooks) == 0 {
		if err = qrfu.check(); err != nil {
			return 0, err
		}
		affected, err = qrfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QouteRetweetFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qrfu.check(); err != nil {
				return 0, err
			}
			qrfu.mutation = mutation
			affected, err = qrfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qrfu.hooks) - 1; i >= 0; i-- {
			if qrfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qrfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qrfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qrfu *QouteRetweetFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := qrfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qrfu *QouteRetweetFeatureUpdate) Exec(ctx context.Context) error {
	_, err := qrfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qrfu *QouteRetweetFeatureUpdate) ExecX(ctx context.Context) {
	if err := qrfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qrfu *QouteRetweetFeatureUpdate) check() error {
	if v, ok := qrfu.mutation.Qoute(); ok {
		if err := qoute_retweet_feature.QouteValidator(v); err != nil {
			return &ValidationError{Name: "qoute", err: fmt.Errorf(`ent: validator failed for field "Qoute_retweet_feature.qoute": %w`, err)}
		}
	}
	return nil
}

func (qrfu *QouteRetweetFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   qoute_retweet_feature.Table,
			Columns: qoute_retweet_feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: qoute_retweet_feature.FieldID,
			},
		},
	}
	if ps := qrfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qrfu.mutation.FromAccountID(); ok {
		_spec.SetField(qoute_retweet_feature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := qrfu.mutation.AddedFromAccountID(); ok {
		_spec.AddField(qoute_retweet_feature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := qrfu.mutation.QouteRetweet(); ok {
		_spec.SetField(qoute_retweet_feature.FieldQouteRetweet, field.TypeBool, value)
	}
	if value, ok := qrfu.mutation.Qoute(); ok {
		_spec.SetField(qoute_retweet_feature.FieldQoute, field.TypeString, value)
	}
	if value, ok := qrfu.mutation.PostID(); ok {
		_spec.SetField(qoute_retweet_feature.FieldPostID, field.TypeUUID, value)
	}
	if value, ok := qrfu.mutation.CreatedAt(); ok {
		_spec.SetField(qoute_retweet_feature.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qrfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qoute_retweet_feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// QouteRetweetFeatureUpdateOne is the builder for updating a single Qoute_retweet_feature entity.
type QouteRetweetFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QouteRetweetFeatureMutation
}

// SetFromAccountID sets the "from_account_id" field.
func (qrfuo *QouteRetweetFeatureUpdateOne) SetFromAccountID(i int64) *QouteRetweetFeatureUpdateOne {
	qrfuo.mutation.ResetFromAccountID()
	qrfuo.mutation.SetFromAccountID(i)
	return qrfuo
}

// AddFromAccountID adds i to the "from_account_id" field.
func (qrfuo *QouteRetweetFeatureUpdateOne) AddFromAccountID(i int64) *QouteRetweetFeatureUpdateOne {
	qrfuo.mutation.AddFromAccountID(i)
	return qrfuo
}

// SetQouteRetweet sets the "qoute_retweet" field.
func (qrfuo *QouteRetweetFeatureUpdateOne) SetQouteRetweet(b bool) *QouteRetweetFeatureUpdateOne {
	qrfuo.mutation.SetQouteRetweet(b)
	return qrfuo
}

// SetNillableQouteRetweet sets the "qoute_retweet" field if the given value is not nil.
func (qrfuo *QouteRetweetFeatureUpdateOne) SetNillableQouteRetweet(b *bool) *QouteRetweetFeatureUpdateOne {
	if b != nil {
		qrfuo.SetQouteRetweet(*b)
	}
	return qrfuo
}

// SetQoute sets the "qoute" field.
func (qrfuo *QouteRetweetFeatureUpdateOne) SetQoute(s string) *QouteRetweetFeatureUpdateOne {
	qrfuo.mutation.SetQoute(s)
	return qrfuo
}

// SetPostID sets the "post_id" field.
func (qrfuo *QouteRetweetFeatureUpdateOne) SetPostID(u uuid.UUID) *QouteRetweetFeatureUpdateOne {
	qrfuo.mutation.SetPostID(u)
	return qrfuo
}

// SetCreatedAt sets the "created_at" field.
func (qrfuo *QouteRetweetFeatureUpdateOne) SetCreatedAt(t time.Time) *QouteRetweetFeatureUpdateOne {
	qrfuo.mutation.SetCreatedAt(t)
	return qrfuo
}

// Mutation returns the QouteRetweetFeatureMutation object of the builder.
func (qrfuo *QouteRetweetFeatureUpdateOne) Mutation() *QouteRetweetFeatureMutation {
	return qrfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qrfuo *QouteRetweetFeatureUpdateOne) Select(field string, fields ...string) *QouteRetweetFeatureUpdateOne {
	qrfuo.fields = append([]string{field}, fields...)
	return qrfuo
}

// Save executes the query and returns the updated Qoute_retweet_feature entity.
func (qrfuo *QouteRetweetFeatureUpdateOne) Save(ctx context.Context) (*Qoute_retweet_feature, error) {
	var (
		err  error
		node *Qoute_retweet_feature
	)
	if len(qrfuo.hooks) == 0 {
		if err = qrfuo.check(); err != nil {
			return nil, err
		}
		node, err = qrfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QouteRetweetFeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qrfuo.check(); err != nil {
				return nil, err
			}
			qrfuo.mutation = mutation
			node, err = qrfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(qrfuo.hooks) - 1; i >= 0; i-- {
			if qrfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qrfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qrfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Qoute_retweet_feature)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QouteRetweetFeatureMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (qrfuo *QouteRetweetFeatureUpdateOne) SaveX(ctx context.Context) *Qoute_retweet_feature {
	node, err := qrfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qrfuo *QouteRetweetFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := qrfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qrfuo *QouteRetweetFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := qrfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qrfuo *QouteRetweetFeatureUpdateOne) check() error {
	if v, ok := qrfuo.mutation.Qoute(); ok {
		if err := qoute_retweet_feature.QouteValidator(v); err != nil {
			return &ValidationError{Name: "qoute", err: fmt.Errorf(`ent: validator failed for field "Qoute_retweet_feature.qoute": %w`, err)}
		}
	}
	return nil
}

func (qrfuo *QouteRetweetFeatureUpdateOne) sqlSave(ctx context.Context) (_node *Qoute_retweet_feature, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   qoute_retweet_feature.Table,
			Columns: qoute_retweet_feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: qoute_retweet_feature.FieldID,
			},
		},
	}
	id, ok := qrfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Qoute_retweet_feature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qrfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qoute_retweet_feature.FieldID)
		for _, f := range fields {
			if !qoute_retweet_feature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qoute_retweet_feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qrfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qrfuo.mutation.FromAccountID(); ok {
		_spec.SetField(qoute_retweet_feature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := qrfuo.mutation.AddedFromAccountID(); ok {
		_spec.AddField(qoute_retweet_feature.FieldFromAccountID, field.TypeInt64, value)
	}
	if value, ok := qrfuo.mutation.QouteRetweet(); ok {
		_spec.SetField(qoute_retweet_feature.FieldQouteRetweet, field.TypeBool, value)
	}
	if value, ok := qrfuo.mutation.Qoute(); ok {
		_spec.SetField(qoute_retweet_feature.FieldQoute, field.TypeString, value)
	}
	if value, ok := qrfuo.mutation.PostID(); ok {
		_spec.SetField(qoute_retweet_feature.FieldPostID, field.TypeUUID, value)
	}
	if value, ok := qrfuo.mutation.CreatedAt(); ok {
		_spec.SetField(qoute_retweet_feature.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Qoute_retweet_feature{config: qrfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qrfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qoute_retweet_feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
