// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/account"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/accountnotifs"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/likefeature"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/post"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/qoute_retweet_feature"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/retweet_feature"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/tokens"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/users"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount               = "Account"
	TypeAccountNotifs         = "AccountNotifs"
	TypeLikeFeature           = "LikeFeature"
	TypePost                  = "Post"
	TypeQoute_retweet_feature = "Qoute_retweet_feature"
	TypeRetweet_feature       = "Retweet_feature"
	TypeTokens                = "Tokens"
	TypeUsers                 = "Users"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	owner         *string
	is_private    *bool
	created_at    *time.Time
	follower      *int64
	addfollower   *int64
	following     *int64
	addfollowing  *int64
	photo_dir     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Account, error)
	predicates    []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int64) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Account entities.
func (m *AccountMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *AccountMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *AccountMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *AccountMutation) ResetOwner() {
	m.owner = nil
}

// SetIsPrivate sets the "is_private" field.
func (m *AccountMutation) SetIsPrivate(b bool) {
	m.is_private = &b
}

// IsPrivate returns the value of the "is_private" field in the mutation.
func (m *AccountMutation) IsPrivate() (r bool, exists bool) {
	v := m.is_private
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPrivate returns the old "is_private" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIsPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPrivate: %w", err)
	}
	return oldValue.IsPrivate, nil
}

// ResetIsPrivate resets all changes to the "is_private" field.
func (m *AccountMutation) ResetIsPrivate() {
	m.is_private = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetFollower sets the "follower" field.
func (m *AccountMutation) SetFollower(i int64) {
	m.follower = &i
	m.addfollower = nil
}

// Follower returns the value of the "follower" field in the mutation.
func (m *AccountMutation) Follower() (r int64, exists bool) {
	v := m.follower
	if v == nil {
		return
	}
	return *v, true
}

// OldFollower returns the old "follower" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldFollower(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollower: %w", err)
	}
	return oldValue.Follower, nil
}

// AddFollower adds i to the "follower" field.
func (m *AccountMutation) AddFollower(i int64) {
	if m.addfollower != nil {
		*m.addfollower += i
	} else {
		m.addfollower = &i
	}
}

// AddedFollower returns the value that was added to the "follower" field in this mutation.
func (m *AccountMutation) AddedFollower() (r int64, exists bool) {
	v := m.addfollower
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollower resets all changes to the "follower" field.
func (m *AccountMutation) ResetFollower() {
	m.follower = nil
	m.addfollower = nil
}

// SetFollowing sets the "following" field.
func (m *AccountMutation) SetFollowing(i int64) {
	m.following = &i
	m.addfollowing = nil
}

// Following returns the value of the "following" field in the mutation.
func (m *AccountMutation) Following() (r int64, exists bool) {
	v := m.following
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowing returns the old "following" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldFollowing(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowing: %w", err)
	}
	return oldValue.Following, nil
}

// AddFollowing adds i to the "following" field.
func (m *AccountMutation) AddFollowing(i int64) {
	if m.addfollowing != nil {
		*m.addfollowing += i
	} else {
		m.addfollowing = &i
	}
}

// AddedFollowing returns the value that was added to the "following" field in this mutation.
func (m *AccountMutation) AddedFollowing() (r int64, exists bool) {
	v := m.addfollowing
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowing resets all changes to the "following" field.
func (m *AccountMutation) ResetFollowing() {
	m.following = nil
	m.addfollowing = nil
}

// SetPhotoDir sets the "photo_dir" field.
func (m *AccountMutation) SetPhotoDir(s string) {
	m.photo_dir = &s
}

// PhotoDir returns the value of the "photo_dir" field in the mutation.
func (m *AccountMutation) PhotoDir() (r string, exists bool) {
	v := m.photo_dir
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoDir returns the old "photo_dir" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPhotoDir(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoDir is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoDir requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoDir: %w", err)
	}
	return oldValue.PhotoDir, nil
}

// ClearPhotoDir clears the value of the "photo_dir" field.
func (m *AccountMutation) ClearPhotoDir() {
	m.photo_dir = nil
	m.clearedFields[account.FieldPhotoDir] = struct{}{}
}

// PhotoDirCleared returns if the "photo_dir" field was cleared in this mutation.
func (m *AccountMutation) PhotoDirCleared() bool {
	_, ok := m.clearedFields[account.FieldPhotoDir]
	return ok
}

// ResetPhotoDir resets all changes to the "photo_dir" field.
func (m *AccountMutation) ResetPhotoDir() {
	m.photo_dir = nil
	delete(m.clearedFields, account.FieldPhotoDir)
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.owner != nil {
		fields = append(fields, account.FieldOwner)
	}
	if m.is_private != nil {
		fields = append(fields, account.FieldIsPrivate)
	}
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.follower != nil {
		fields = append(fields, account.FieldFollower)
	}
	if m.following != nil {
		fields = append(fields, account.FieldFollowing)
	}
	if m.photo_dir != nil {
		fields = append(fields, account.FieldPhotoDir)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldOwner:
		return m.Owner()
	case account.FieldIsPrivate:
		return m.IsPrivate()
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldFollower:
		return m.Follower()
	case account.FieldFollowing:
		return m.Following()
	case account.FieldPhotoDir:
		return m.PhotoDir()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldOwner:
		return m.OldOwner(ctx)
	case account.FieldIsPrivate:
		return m.OldIsPrivate(ctx)
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldFollower:
		return m.OldFollower(ctx)
	case account.FieldFollowing:
		return m.OldFollowing(ctx)
	case account.FieldPhotoDir:
		return m.OldPhotoDir(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case account.FieldIsPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPrivate(v)
		return nil
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldFollower:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollower(v)
		return nil
	case account.FieldFollowing:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowing(v)
		return nil
	case account.FieldPhotoDir:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoDir(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addfollower != nil {
		fields = append(fields, account.FieldFollower)
	}
	if m.addfollowing != nil {
		fields = append(fields, account.FieldFollowing)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldFollower:
		return m.AddedFollower()
	case account.FieldFollowing:
		return m.AddedFollowing()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldFollower:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollower(v)
		return nil
	case account.FieldFollowing:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowing(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldPhotoDir) {
		fields = append(fields, account.FieldPhotoDir)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldPhotoDir:
		m.ClearPhotoDir()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldOwner:
		m.ResetOwner()
		return nil
	case account.FieldIsPrivate:
		m.ResetIsPrivate()
		return nil
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldFollower:
		m.ResetFollower()
		return nil
	case account.FieldFollowing:
		m.ResetFollowing()
		return nil
	case account.FieldPhotoDir:
		m.ResetPhotoDir()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// AccountNotifsMutation represents an operation that mutates the AccountNotifs nodes in the graph.
type AccountNotifsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	account_id    *int64
	addaccount_id *int64
	notif_type    *string
	notif_title   *string
	notif_content *string
	notif_time    *time.Time
	username      *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AccountNotifs, error)
	predicates    []predicate.AccountNotifs
}

var _ ent.Mutation = (*AccountNotifsMutation)(nil)

// accountnotifsOption allows management of the mutation configuration using functional options.
type accountnotifsOption func(*AccountNotifsMutation)

// newAccountNotifsMutation creates new mutation for the AccountNotifs entity.
func newAccountNotifsMutation(c config, op Op, opts ...accountnotifsOption) *AccountNotifsMutation {
	m := &AccountNotifsMutation{
		config:        c,
		op:            op,
		typ:           TypeAccountNotifs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountNotifsID sets the ID field of the mutation.
func withAccountNotifsID(id uuid.UUID) accountnotifsOption {
	return func(m *AccountNotifsMutation) {
		var (
			err   error
			once  sync.Once
			value *AccountNotifs
		)
		m.oldValue = func(ctx context.Context) (*AccountNotifs, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AccountNotifs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccountNotifs sets the old AccountNotifs of the mutation.
func withAccountNotifs(node *AccountNotifs) accountnotifsOption {
	return func(m *AccountNotifsMutation) {
		m.oldValue = func(context.Context) (*AccountNotifs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountNotifsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountNotifsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AccountNotifs entities.
func (m *AccountNotifsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountNotifsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountNotifsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AccountNotifs.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccountID sets the "account_id" field.
func (m *AccountNotifsMutation) SetAccountID(i int64) {
	m.account_id = &i
	m.addaccount_id = nil
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *AccountNotifsMutation) AccountID() (r int64, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldAccountID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// AddAccountID adds i to the "account_id" field.
func (m *AccountNotifsMutation) AddAccountID(i int64) {
	if m.addaccount_id != nil {
		*m.addaccount_id += i
	} else {
		m.addaccount_id = &i
	}
}

// AddedAccountID returns the value that was added to the "account_id" field in this mutation.
func (m *AccountNotifsMutation) AddedAccountID() (r int64, exists bool) {
	v := m.addaccount_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAccountID clears the value of the "account_id" field.
func (m *AccountNotifsMutation) ClearAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
	m.clearedFields[accountnotifs.FieldAccountID] = struct{}{}
}

// AccountIDCleared returns if the "account_id" field was cleared in this mutation.
func (m *AccountNotifsMutation) AccountIDCleared() bool {
	_, ok := m.clearedFields[accountnotifs.FieldAccountID]
	return ok
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *AccountNotifsMutation) ResetAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
	delete(m.clearedFields, accountnotifs.FieldAccountID)
}

// SetNotifType sets the "notif_type" field.
func (m *AccountNotifsMutation) SetNotifType(s string) {
	m.notif_type = &s
}

// NotifType returns the value of the "notif_type" field in the mutation.
func (m *AccountNotifsMutation) NotifType() (r string, exists bool) {
	v := m.notif_type
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifType returns the old "notif_type" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldNotifType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifType: %w", err)
	}
	return oldValue.NotifType, nil
}

// ResetNotifType resets all changes to the "notif_type" field.
func (m *AccountNotifsMutation) ResetNotifType() {
	m.notif_type = nil
}

// SetNotifTitle sets the "notif_title" field.
func (m *AccountNotifsMutation) SetNotifTitle(s string) {
	m.notif_title = &s
}

// NotifTitle returns the value of the "notif_title" field in the mutation.
func (m *AccountNotifsMutation) NotifTitle() (r string, exists bool) {
	v := m.notif_title
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifTitle returns the old "notif_title" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldNotifTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifTitle: %w", err)
	}
	return oldValue.NotifTitle, nil
}

// ClearNotifTitle clears the value of the "notif_title" field.
func (m *AccountNotifsMutation) ClearNotifTitle() {
	m.notif_title = nil
	m.clearedFields[accountnotifs.FieldNotifTitle] = struct{}{}
}

// NotifTitleCleared returns if the "notif_title" field was cleared in this mutation.
func (m *AccountNotifsMutation) NotifTitleCleared() bool {
	_, ok := m.clearedFields[accountnotifs.FieldNotifTitle]
	return ok
}

// ResetNotifTitle resets all changes to the "notif_title" field.
func (m *AccountNotifsMutation) ResetNotifTitle() {
	m.notif_title = nil
	delete(m.clearedFields, accountnotifs.FieldNotifTitle)
}

// SetNotifContent sets the "notif_content" field.
func (m *AccountNotifsMutation) SetNotifContent(s string) {
	m.notif_content = &s
}

// NotifContent returns the value of the "notif_content" field in the mutation.
func (m *AccountNotifsMutation) NotifContent() (r string, exists bool) {
	v := m.notif_content
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifContent returns the old "notif_content" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldNotifContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifContent: %w", err)
	}
	return oldValue.NotifContent, nil
}

// ClearNotifContent clears the value of the "notif_content" field.
func (m *AccountNotifsMutation) ClearNotifContent() {
	m.notif_content = nil
	m.clearedFields[accountnotifs.FieldNotifContent] = struct{}{}
}

// NotifContentCleared returns if the "notif_content" field was cleared in this mutation.
func (m *AccountNotifsMutation) NotifContentCleared() bool {
	_, ok := m.clearedFields[accountnotifs.FieldNotifContent]
	return ok
}

// ResetNotifContent resets all changes to the "notif_content" field.
func (m *AccountNotifsMutation) ResetNotifContent() {
	m.notif_content = nil
	delete(m.clearedFields, accountnotifs.FieldNotifContent)
}

// SetNotifTime sets the "notif_time" field.
func (m *AccountNotifsMutation) SetNotifTime(t time.Time) {
	m.notif_time = &t
}

// NotifTime returns the value of the "notif_time" field in the mutation.
func (m *AccountNotifsMutation) NotifTime() (r time.Time, exists bool) {
	v := m.notif_time
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifTime returns the old "notif_time" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldNotifTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifTime: %w", err)
	}
	return oldValue.NotifTime, nil
}

// ClearNotifTime clears the value of the "notif_time" field.
func (m *AccountNotifsMutation) ClearNotifTime() {
	m.notif_time = nil
	m.clearedFields[accountnotifs.FieldNotifTime] = struct{}{}
}

// NotifTimeCleared returns if the "notif_time" field was cleared in this mutation.
func (m *AccountNotifsMutation) NotifTimeCleared() bool {
	_, ok := m.clearedFields[accountnotifs.FieldNotifTime]
	return ok
}

// ResetNotifTime resets all changes to the "notif_time" field.
func (m *AccountNotifsMutation) ResetNotifTime() {
	m.notif_time = nil
	delete(m.clearedFields, accountnotifs.FieldNotifTime)
}

// SetUsername sets the "username" field.
func (m *AccountNotifsMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AccountNotifsMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *AccountNotifsMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[accountnotifs.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *AccountNotifsMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[accountnotifs.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *AccountNotifsMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, accountnotifs.FieldUsername)
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountNotifsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountNotifsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AccountNotifs entity.
// If the AccountNotifs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountNotifsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountNotifsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the AccountNotifsMutation builder.
func (m *AccountNotifsMutation) Where(ps ...predicate.AccountNotifs) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountNotifsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AccountNotifs).
func (m *AccountNotifsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountNotifsMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.account_id != nil {
		fields = append(fields, accountnotifs.FieldAccountID)
	}
	if m.notif_type != nil {
		fields = append(fields, accountnotifs.FieldNotifType)
	}
	if m.notif_title != nil {
		fields = append(fields, accountnotifs.FieldNotifTitle)
	}
	if m.notif_content != nil {
		fields = append(fields, accountnotifs.FieldNotifContent)
	}
	if m.notif_time != nil {
		fields = append(fields, accountnotifs.FieldNotifTime)
	}
	if m.username != nil {
		fields = append(fields, accountnotifs.FieldUsername)
	}
	if m.created_at != nil {
		fields = append(fields, accountnotifs.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountNotifsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accountnotifs.FieldAccountID:
		return m.AccountID()
	case accountnotifs.FieldNotifType:
		return m.NotifType()
	case accountnotifs.FieldNotifTitle:
		return m.NotifTitle()
	case accountnotifs.FieldNotifContent:
		return m.NotifContent()
	case accountnotifs.FieldNotifTime:
		return m.NotifTime()
	case accountnotifs.FieldUsername:
		return m.Username()
	case accountnotifs.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountNotifsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accountnotifs.FieldAccountID:
		return m.OldAccountID(ctx)
	case accountnotifs.FieldNotifType:
		return m.OldNotifType(ctx)
	case accountnotifs.FieldNotifTitle:
		return m.OldNotifTitle(ctx)
	case accountnotifs.FieldNotifContent:
		return m.OldNotifContent(ctx)
	case accountnotifs.FieldNotifTime:
		return m.OldNotifTime(ctx)
	case accountnotifs.FieldUsername:
		return m.OldUsername(ctx)
	case accountnotifs.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AccountNotifs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountNotifsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accountnotifs.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case accountnotifs.FieldNotifType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifType(v)
		return nil
	case accountnotifs.FieldNotifTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifTitle(v)
		return nil
	case accountnotifs.FieldNotifContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifContent(v)
		return nil
	case accountnotifs.FieldNotifTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifTime(v)
		return nil
	case accountnotifs.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case accountnotifs.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AccountNotifs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountNotifsMutation) AddedFields() []string {
	var fields []string
	if m.addaccount_id != nil {
		fields = append(fields, accountnotifs.FieldAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountNotifsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case accountnotifs.FieldAccountID:
		return m.AddedAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountNotifsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case accountnotifs.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown AccountNotifs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountNotifsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(accountnotifs.FieldAccountID) {
		fields = append(fields, accountnotifs.FieldAccountID)
	}
	if m.FieldCleared(accountnotifs.FieldNotifTitle) {
		fields = append(fields, accountnotifs.FieldNotifTitle)
	}
	if m.FieldCleared(accountnotifs.FieldNotifContent) {
		fields = append(fields, accountnotifs.FieldNotifContent)
	}
	if m.FieldCleared(accountnotifs.FieldNotifTime) {
		fields = append(fields, accountnotifs.FieldNotifTime)
	}
	if m.FieldCleared(accountnotifs.FieldUsername) {
		fields = append(fields, accountnotifs.FieldUsername)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountNotifsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountNotifsMutation) ClearField(name string) error {
	switch name {
	case accountnotifs.FieldAccountID:
		m.ClearAccountID()
		return nil
	case accountnotifs.FieldNotifTitle:
		m.ClearNotifTitle()
		return nil
	case accountnotifs.FieldNotifContent:
		m.ClearNotifContent()
		return nil
	case accountnotifs.FieldNotifTime:
		m.ClearNotifTime()
		return nil
	case accountnotifs.FieldUsername:
		m.ClearUsername()
		return nil
	}
	return fmt.Errorf("unknown AccountNotifs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountNotifsMutation) ResetField(name string) error {
	switch name {
	case accountnotifs.FieldAccountID:
		m.ResetAccountID()
		return nil
	case accountnotifs.FieldNotifType:
		m.ResetNotifType()
		return nil
	case accountnotifs.FieldNotifTitle:
		m.ResetNotifTitle()
		return nil
	case accountnotifs.FieldNotifContent:
		m.ResetNotifContent()
		return nil
	case accountnotifs.FieldNotifTime:
		m.ResetNotifTime()
		return nil
	case accountnotifs.FieldUsername:
		m.ResetUsername()
		return nil
	case accountnotifs.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown AccountNotifs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountNotifsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountNotifsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountNotifsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountNotifsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountNotifsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountNotifsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountNotifsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AccountNotifs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountNotifsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AccountNotifs edge %s", name)
}

// LikeFeatureMutation represents an operation that mutates the LikeFeature nodes in the graph.
type LikeFeatureMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	from_account_id    *int64
	addfrom_account_id *int64
	is_like            *bool
	post_id            *uuid.UUID
	created_at         *time.Time
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*LikeFeature, error)
	predicates         []predicate.LikeFeature
}

var _ ent.Mutation = (*LikeFeatureMutation)(nil)

// likefeatureOption allows management of the mutation configuration using functional options.
type likefeatureOption func(*LikeFeatureMutation)

// newLikeFeatureMutation creates new mutation for the LikeFeature entity.
func newLikeFeatureMutation(c config, op Op, opts ...likefeatureOption) *LikeFeatureMutation {
	m := &LikeFeatureMutation{
		config:        c,
		op:            op,
		typ:           TypeLikeFeature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLikeFeatureID sets the ID field of the mutation.
func withLikeFeatureID(id int) likefeatureOption {
	return func(m *LikeFeatureMutation) {
		var (
			err   error
			once  sync.Once
			value *LikeFeature
		)
		m.oldValue = func(ctx context.Context) (*LikeFeature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LikeFeature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLikeFeature sets the old LikeFeature of the mutation.
func withLikeFeature(node *LikeFeature) likefeatureOption {
	return func(m *LikeFeatureMutation) {
		m.oldValue = func(context.Context) (*LikeFeature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikeFeatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikeFeatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LikeFeatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LikeFeatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LikeFeature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFromAccountID sets the "from_account_id" field.
func (m *LikeFeatureMutation) SetFromAccountID(i int64) {
	m.from_account_id = &i
	m.addfrom_account_id = nil
}

// FromAccountID returns the value of the "from_account_id" field in the mutation.
func (m *LikeFeatureMutation) FromAccountID() (r int64, exists bool) {
	v := m.from_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAccountID returns the old "from_account_id" field's value of the LikeFeature entity.
// If the LikeFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeFeatureMutation) OldFromAccountID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAccountID: %w", err)
	}
	return oldValue.FromAccountID, nil
}

// AddFromAccountID adds i to the "from_account_id" field.
func (m *LikeFeatureMutation) AddFromAccountID(i int64) {
	if m.addfrom_account_id != nil {
		*m.addfrom_account_id += i
	} else {
		m.addfrom_account_id = &i
	}
}

// AddedFromAccountID returns the value that was added to the "from_account_id" field in this mutation.
func (m *LikeFeatureMutation) AddedFromAccountID() (r int64, exists bool) {
	v := m.addfrom_account_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromAccountID resets all changes to the "from_account_id" field.
func (m *LikeFeatureMutation) ResetFromAccountID() {
	m.from_account_id = nil
	m.addfrom_account_id = nil
}

// SetIsLike sets the "is_like" field.
func (m *LikeFeatureMutation) SetIsLike(b bool) {
	m.is_like = &b
}

// IsLike returns the value of the "is_like" field in the mutation.
func (m *LikeFeatureMutation) IsLike() (r bool, exists bool) {
	v := m.is_like
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLike returns the old "is_like" field's value of the LikeFeature entity.
// If the LikeFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeFeatureMutation) OldIsLike(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLike is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLike requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLike: %w", err)
	}
	return oldValue.IsLike, nil
}

// ResetIsLike resets all changes to the "is_like" field.
func (m *LikeFeatureMutation) ResetIsLike() {
	m.is_like = nil
}

// SetPostID sets the "post_id" field.
func (m *LikeFeatureMutation) SetPostID(u uuid.UUID) {
	m.post_id = &u
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *LikeFeatureMutation) PostID() (r uuid.UUID, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the LikeFeature entity.
// If the LikeFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeFeatureMutation) OldPostID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// ResetPostID resets all changes to the "post_id" field.
func (m *LikeFeatureMutation) ResetPostID() {
	m.post_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LikeFeatureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LikeFeatureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LikeFeature entity.
// If the LikeFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeFeatureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LikeFeatureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the LikeFeatureMutation builder.
func (m *LikeFeatureMutation) Where(ps ...predicate.LikeFeature) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LikeFeatureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LikeFeature).
func (m *LikeFeatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikeFeatureMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.from_account_id != nil {
		fields = append(fields, likefeature.FieldFromAccountID)
	}
	if m.is_like != nil {
		fields = append(fields, likefeature.FieldIsLike)
	}
	if m.post_id != nil {
		fields = append(fields, likefeature.FieldPostID)
	}
	if m.created_at != nil {
		fields = append(fields, likefeature.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikeFeatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case likefeature.FieldFromAccountID:
		return m.FromAccountID()
	case likefeature.FieldIsLike:
		return m.IsLike()
	case likefeature.FieldPostID:
		return m.PostID()
	case likefeature.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikeFeatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case likefeature.FieldFromAccountID:
		return m.OldFromAccountID(ctx)
	case likefeature.FieldIsLike:
		return m.OldIsLike(ctx)
	case likefeature.FieldPostID:
		return m.OldPostID(ctx)
	case likefeature.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LikeFeature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeFeatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case likefeature.FieldFromAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAccountID(v)
		return nil
	case likefeature.FieldIsLike:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLike(v)
		return nil
	case likefeature.FieldPostID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case likefeature.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LikeFeature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikeFeatureMutation) AddedFields() []string {
	var fields []string
	if m.addfrom_account_id != nil {
		fields = append(fields, likefeature.FieldFromAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikeFeatureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case likefeature.FieldFromAccountID:
		return m.AddedFromAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeFeatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	case likefeature.FieldFromAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown LikeFeature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikeFeatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikeFeatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikeFeatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LikeFeature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikeFeatureMutation) ResetField(name string) error {
	switch name {
	case likefeature.FieldFromAccountID:
		m.ResetFromAccountID()
		return nil
	case likefeature.FieldIsLike:
		m.ResetIsLike()
		return nil
	case likefeature.FieldPostID:
		m.ResetPostID()
		return nil
	case likefeature.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown LikeFeature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikeFeatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikeFeatureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikeFeatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikeFeatureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikeFeatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikeFeatureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikeFeatureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LikeFeature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikeFeatureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LikeFeature edge %s", name)
}

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	owner         *string
	is_private    *bool
	created_at    *time.Time
	follower      *int64
	addfollower   *int64
	following     *int64
	addfollowing  *int64
	photo_dir     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Post, error)
	predicates    []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id uuid.UUID) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Post entities.
func (m *PostMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *PostMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *PostMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *PostMutation) ResetOwner() {
	m.owner = nil
}

// SetIsPrivate sets the "is_private" field.
func (m *PostMutation) SetIsPrivate(b bool) {
	m.is_private = &b
}

// IsPrivate returns the value of the "is_private" field in the mutation.
func (m *PostMutation) IsPrivate() (r bool, exists bool) {
	v := m.is_private
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPrivate returns the old "is_private" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldIsPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPrivate: %w", err)
	}
	return oldValue.IsPrivate, nil
}

// ResetIsPrivate resets all changes to the "is_private" field.
func (m *PostMutation) ResetIsPrivate() {
	m.is_private = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PostMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetFollower sets the "follower" field.
func (m *PostMutation) SetFollower(i int64) {
	m.follower = &i
	m.addfollower = nil
}

// Follower returns the value of the "follower" field in the mutation.
func (m *PostMutation) Follower() (r int64, exists bool) {
	v := m.follower
	if v == nil {
		return
	}
	return *v, true
}

// OldFollower returns the old "follower" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldFollower(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollower: %w", err)
	}
	return oldValue.Follower, nil
}

// AddFollower adds i to the "follower" field.
func (m *PostMutation) AddFollower(i int64) {
	if m.addfollower != nil {
		*m.addfollower += i
	} else {
		m.addfollower = &i
	}
}

// AddedFollower returns the value that was added to the "follower" field in this mutation.
func (m *PostMutation) AddedFollower() (r int64, exists bool) {
	v := m.addfollower
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollower resets all changes to the "follower" field.
func (m *PostMutation) ResetFollower() {
	m.follower = nil
	m.addfollower = nil
}

// SetFollowing sets the "following" field.
func (m *PostMutation) SetFollowing(i int64) {
	m.following = &i
	m.addfollowing = nil
}

// Following returns the value of the "following" field in the mutation.
func (m *PostMutation) Following() (r int64, exists bool) {
	v := m.following
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowing returns the old "following" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldFollowing(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowing: %w", err)
	}
	return oldValue.Following, nil
}

// AddFollowing adds i to the "following" field.
func (m *PostMutation) AddFollowing(i int64) {
	if m.addfollowing != nil {
		*m.addfollowing += i
	} else {
		m.addfollowing = &i
	}
}

// AddedFollowing returns the value that was added to the "following" field in this mutation.
func (m *PostMutation) AddedFollowing() (r int64, exists bool) {
	v := m.addfollowing
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowing resets all changes to the "following" field.
func (m *PostMutation) ResetFollowing() {
	m.following = nil
	m.addfollowing = nil
}

// SetPhotoDir sets the "photo_dir" field.
func (m *PostMutation) SetPhotoDir(s string) {
	m.photo_dir = &s
}

// PhotoDir returns the value of the "photo_dir" field in the mutation.
func (m *PostMutation) PhotoDir() (r string, exists bool) {
	v := m.photo_dir
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoDir returns the old "photo_dir" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldPhotoDir(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoDir is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoDir requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoDir: %w", err)
	}
	return oldValue.PhotoDir, nil
}

// ClearPhotoDir clears the value of the "photo_dir" field.
func (m *PostMutation) ClearPhotoDir() {
	m.photo_dir = nil
	m.clearedFields[post.FieldPhotoDir] = struct{}{}
}

// PhotoDirCleared returns if the "photo_dir" field was cleared in this mutation.
func (m *PostMutation) PhotoDirCleared() bool {
	_, ok := m.clearedFields[post.FieldPhotoDir]
	return ok
}

// ResetPhotoDir resets all changes to the "photo_dir" field.
func (m *PostMutation) ResetPhotoDir() {
	m.photo_dir = nil
	delete(m.clearedFields, post.FieldPhotoDir)
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.owner != nil {
		fields = append(fields, post.FieldOwner)
	}
	if m.is_private != nil {
		fields = append(fields, post.FieldIsPrivate)
	}
	if m.created_at != nil {
		fields = append(fields, post.FieldCreatedAt)
	}
	if m.follower != nil {
		fields = append(fields, post.FieldFollower)
	}
	if m.following != nil {
		fields = append(fields, post.FieldFollowing)
	}
	if m.photo_dir != nil {
		fields = append(fields, post.FieldPhotoDir)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldOwner:
		return m.Owner()
	case post.FieldIsPrivate:
		return m.IsPrivate()
	case post.FieldCreatedAt:
		return m.CreatedAt()
	case post.FieldFollower:
		return m.Follower()
	case post.FieldFollowing:
		return m.Following()
	case post.FieldPhotoDir:
		return m.PhotoDir()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldOwner:
		return m.OldOwner(ctx)
	case post.FieldIsPrivate:
		return m.OldIsPrivate(ctx)
	case post.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case post.FieldFollower:
		return m.OldFollower(ctx)
	case post.FieldFollowing:
		return m.OldFollowing(ctx)
	case post.FieldPhotoDir:
		return m.OldPhotoDir(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case post.FieldIsPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPrivate(v)
		return nil
	case post.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case post.FieldFollower:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollower(v)
		return nil
	case post.FieldFollowing:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowing(v)
		return nil
	case post.FieldPhotoDir:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoDir(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	var fields []string
	if m.addfollower != nil {
		fields = append(fields, post.FieldFollower)
	}
	if m.addfollowing != nil {
		fields = append(fields, post.FieldFollowing)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case post.FieldFollower:
		return m.AddedFollower()
	case post.FieldFollowing:
		return m.AddedFollowing()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case post.FieldFollower:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollower(v)
		return nil
	case post.FieldFollowing:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowing(v)
		return nil
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(post.FieldPhotoDir) {
		fields = append(fields, post.FieldPhotoDir)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	switch name {
	case post.FieldPhotoDir:
		m.ClearPhotoDir()
		return nil
	}
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldOwner:
		m.ResetOwner()
		return nil
	case post.FieldIsPrivate:
		m.ResetIsPrivate()
		return nil
	case post.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case post.FieldFollower:
		m.ResetFollower()
		return nil
	case post.FieldFollowing:
		m.ResetFollowing()
		return nil
	case post.FieldPhotoDir:
		m.ResetPhotoDir()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Post edge %s", name)
}

// QouteRetweetFeatureMutation represents an operation that mutates the Qoute_retweet_feature nodes in the graph.
type QouteRetweetFeatureMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	from_account_id    *int64
	addfrom_account_id *int64
	qoute_retweet      *bool
	qoute              *string
	post_id            *uuid.UUID
	created_at         *time.Time
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Qoute_retweet_feature, error)
	predicates         []predicate.Qoute_retweet_feature
}

var _ ent.Mutation = (*QouteRetweetFeatureMutation)(nil)

// qouteRetweetFeatureOption allows management of the mutation configuration using functional options.
type qouteRetweetFeatureOption func(*QouteRetweetFeatureMutation)

// newQouteRetweetFeatureMutation creates new mutation for the Qoute_retweet_feature entity.
func newQouteRetweetFeatureMutation(c config, op Op, opts ...qouteRetweetFeatureOption) *QouteRetweetFeatureMutation {
	m := &QouteRetweetFeatureMutation{
		config:        c,
		op:            op,
		typ:           TypeQoute_retweet_feature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQoute_retweet_featureID sets the ID field of the mutation.
func withQoute_retweet_featureID(id int) qouteRetweetFeatureOption {
	return func(m *QouteRetweetFeatureMutation) {
		var (
			err   error
			once  sync.Once
			value *Qoute_retweet_feature
		)
		m.oldValue = func(ctx context.Context) (*Qoute_retweet_feature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Qoute_retweet_feature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQoute_retweet_feature sets the old Qoute_retweet_feature of the mutation.
func withQoute_retweet_feature(node *Qoute_retweet_feature) qouteRetweetFeatureOption {
	return func(m *QouteRetweetFeatureMutation) {
		m.oldValue = func(context.Context) (*Qoute_retweet_feature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QouteRetweetFeatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QouteRetweetFeatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QouteRetweetFeatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QouteRetweetFeatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Qoute_retweet_feature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFromAccountID sets the "from_account_id" field.
func (m *QouteRetweetFeatureMutation) SetFromAccountID(i int64) {
	m.from_account_id = &i
	m.addfrom_account_id = nil
}

// FromAccountID returns the value of the "from_account_id" field in the mutation.
func (m *QouteRetweetFeatureMutation) FromAccountID() (r int64, exists bool) {
	v := m.from_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAccountID returns the old "from_account_id" field's value of the Qoute_retweet_feature entity.
// If the Qoute_retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QouteRetweetFeatureMutation) OldFromAccountID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAccountID: %w", err)
	}
	return oldValue.FromAccountID, nil
}

// AddFromAccountID adds i to the "from_account_id" field.
func (m *QouteRetweetFeatureMutation) AddFromAccountID(i int64) {
	if m.addfrom_account_id != nil {
		*m.addfrom_account_id += i
	} else {
		m.addfrom_account_id = &i
	}
}

// AddedFromAccountID returns the value that was added to the "from_account_id" field in this mutation.
func (m *QouteRetweetFeatureMutation) AddedFromAccountID() (r int64, exists bool) {
	v := m.addfrom_account_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromAccountID resets all changes to the "from_account_id" field.
func (m *QouteRetweetFeatureMutation) ResetFromAccountID() {
	m.from_account_id = nil
	m.addfrom_account_id = nil
}

// SetQouteRetweet sets the "qoute_retweet" field.
func (m *QouteRetweetFeatureMutation) SetQouteRetweet(b bool) {
	m.qoute_retweet = &b
}

// QouteRetweet returns the value of the "qoute_retweet" field in the mutation.
func (m *QouteRetweetFeatureMutation) QouteRetweet() (r bool, exists bool) {
	v := m.qoute_retweet
	if v == nil {
		return
	}
	return *v, true
}

// OldQouteRetweet returns the old "qoute_retweet" field's value of the Qoute_retweet_feature entity.
// If the Qoute_retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QouteRetweetFeatureMutation) OldQouteRetweet(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQouteRetweet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQouteRetweet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQouteRetweet: %w", err)
	}
	return oldValue.QouteRetweet, nil
}

// ResetQouteRetweet resets all changes to the "qoute_retweet" field.
func (m *QouteRetweetFeatureMutation) ResetQouteRetweet() {
	m.qoute_retweet = nil
}

// SetQoute sets the "qoute" field.
func (m *QouteRetweetFeatureMutation) SetQoute(s string) {
	m.qoute = &s
}

// Qoute returns the value of the "qoute" field in the mutation.
func (m *QouteRetweetFeatureMutation) Qoute() (r string, exists bool) {
	v := m.qoute
	if v == nil {
		return
	}
	return *v, true
}

// OldQoute returns the old "qoute" field's value of the Qoute_retweet_feature entity.
// If the Qoute_retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QouteRetweetFeatureMutation) OldQoute(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQoute is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQoute requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQoute: %w", err)
	}
	return oldValue.Qoute, nil
}

// ResetQoute resets all changes to the "qoute" field.
func (m *QouteRetweetFeatureMutation) ResetQoute() {
	m.qoute = nil
}

// SetPostID sets the "post_id" field.
func (m *QouteRetweetFeatureMutation) SetPostID(u uuid.UUID) {
	m.post_id = &u
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *QouteRetweetFeatureMutation) PostID() (r uuid.UUID, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the Qoute_retweet_feature entity.
// If the Qoute_retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QouteRetweetFeatureMutation) OldPostID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// ResetPostID resets all changes to the "post_id" field.
func (m *QouteRetweetFeatureMutation) ResetPostID() {
	m.post_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QouteRetweetFeatureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QouteRetweetFeatureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Qoute_retweet_feature entity.
// If the Qoute_retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QouteRetweetFeatureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QouteRetweetFeatureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the QouteRetweetFeatureMutation builder.
func (m *QouteRetweetFeatureMutation) Where(ps ...predicate.Qoute_retweet_feature) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *QouteRetweetFeatureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Qoute_retweet_feature).
func (m *QouteRetweetFeatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QouteRetweetFeatureMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.from_account_id != nil {
		fields = append(fields, qoute_retweet_feature.FieldFromAccountID)
	}
	if m.qoute_retweet != nil {
		fields = append(fields, qoute_retweet_feature.FieldQouteRetweet)
	}
	if m.qoute != nil {
		fields = append(fields, qoute_retweet_feature.FieldQoute)
	}
	if m.post_id != nil {
		fields = append(fields, qoute_retweet_feature.FieldPostID)
	}
	if m.created_at != nil {
		fields = append(fields, qoute_retweet_feature.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QouteRetweetFeatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qoute_retweet_feature.FieldFromAccountID:
		return m.FromAccountID()
	case qoute_retweet_feature.FieldQouteRetweet:
		return m.QouteRetweet()
	case qoute_retweet_feature.FieldQoute:
		return m.Qoute()
	case qoute_retweet_feature.FieldPostID:
		return m.PostID()
	case qoute_retweet_feature.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QouteRetweetFeatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qoute_retweet_feature.FieldFromAccountID:
		return m.OldFromAccountID(ctx)
	case qoute_retweet_feature.FieldQouteRetweet:
		return m.OldQouteRetweet(ctx)
	case qoute_retweet_feature.FieldQoute:
		return m.OldQoute(ctx)
	case qoute_retweet_feature.FieldPostID:
		return m.OldPostID(ctx)
	case qoute_retweet_feature.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Qoute_retweet_feature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QouteRetweetFeatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qoute_retweet_feature.FieldFromAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAccountID(v)
		return nil
	case qoute_retweet_feature.FieldQouteRetweet:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQouteRetweet(v)
		return nil
	case qoute_retweet_feature.FieldQoute:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQoute(v)
		return nil
	case qoute_retweet_feature.FieldPostID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case qoute_retweet_feature.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Qoute_retweet_feature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QouteRetweetFeatureMutation) AddedFields() []string {
	var fields []string
	if m.addfrom_account_id != nil {
		fields = append(fields, qoute_retweet_feature.FieldFromAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QouteRetweetFeatureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case qoute_retweet_feature.FieldFromAccountID:
		return m.AddedFromAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QouteRetweetFeatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	case qoute_retweet_feature.FieldFromAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown Qoute_retweet_feature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QouteRetweetFeatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QouteRetweetFeatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QouteRetweetFeatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Qoute_retweet_feature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QouteRetweetFeatureMutation) ResetField(name string) error {
	switch name {
	case qoute_retweet_feature.FieldFromAccountID:
		m.ResetFromAccountID()
		return nil
	case qoute_retweet_feature.FieldQouteRetweet:
		m.ResetQouteRetweet()
		return nil
	case qoute_retweet_feature.FieldQoute:
		m.ResetQoute()
		return nil
	case qoute_retweet_feature.FieldPostID:
		m.ResetPostID()
		return nil
	case qoute_retweet_feature.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Qoute_retweet_feature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QouteRetweetFeatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QouteRetweetFeatureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QouteRetweetFeatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QouteRetweetFeatureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QouteRetweetFeatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QouteRetweetFeatureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QouteRetweetFeatureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Qoute_retweet_feature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QouteRetweetFeatureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Qoute_retweet_feature edge %s", name)
}

// RetweetFeatureMutation represents an operation that mutates the Retweet_feature nodes in the graph.
type RetweetFeatureMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	from_account_id    *int64
	addfrom_account_id *int64
	retweet            *bool
	post_id            *uuid.UUID
	created_at         *time.Time
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Retweet_feature, error)
	predicates         []predicate.Retweet_feature
}

var _ ent.Mutation = (*RetweetFeatureMutation)(nil)

// retweetFeatureOption allows management of the mutation configuration using functional options.
type retweetFeatureOption func(*RetweetFeatureMutation)

// newRetweetFeatureMutation creates new mutation for the Retweet_feature entity.
func newRetweetFeatureMutation(c config, op Op, opts ...retweetFeatureOption) *RetweetFeatureMutation {
	m := &RetweetFeatureMutation{
		config:        c,
		op:            op,
		typ:           TypeRetweet_feature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRetweet_featureID sets the ID field of the mutation.
func withRetweet_featureID(id int) retweetFeatureOption {
	return func(m *RetweetFeatureMutation) {
		var (
			err   error
			once  sync.Once
			value *Retweet_feature
		)
		m.oldValue = func(ctx context.Context) (*Retweet_feature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Retweet_feature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRetweet_feature sets the old Retweet_feature of the mutation.
func withRetweet_feature(node *Retweet_feature) retweetFeatureOption {
	return func(m *RetweetFeatureMutation) {
		m.oldValue = func(context.Context) (*Retweet_feature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RetweetFeatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RetweetFeatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RetweetFeatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RetweetFeatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Retweet_feature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFromAccountID sets the "from_account_id" field.
func (m *RetweetFeatureMutation) SetFromAccountID(i int64) {
	m.from_account_id = &i
	m.addfrom_account_id = nil
}

// FromAccountID returns the value of the "from_account_id" field in the mutation.
func (m *RetweetFeatureMutation) FromAccountID() (r int64, exists bool) {
	v := m.from_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAccountID returns the old "from_account_id" field's value of the Retweet_feature entity.
// If the Retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetweetFeatureMutation) OldFromAccountID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAccountID: %w", err)
	}
	return oldValue.FromAccountID, nil
}

// AddFromAccountID adds i to the "from_account_id" field.
func (m *RetweetFeatureMutation) AddFromAccountID(i int64) {
	if m.addfrom_account_id != nil {
		*m.addfrom_account_id += i
	} else {
		m.addfrom_account_id = &i
	}
}

// AddedFromAccountID returns the value that was added to the "from_account_id" field in this mutation.
func (m *RetweetFeatureMutation) AddedFromAccountID() (r int64, exists bool) {
	v := m.addfrom_account_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromAccountID resets all changes to the "from_account_id" field.
func (m *RetweetFeatureMutation) ResetFromAccountID() {
	m.from_account_id = nil
	m.addfrom_account_id = nil
}

// SetRetweet sets the "retweet" field.
func (m *RetweetFeatureMutation) SetRetweet(b bool) {
	m.retweet = &b
}

// Retweet returns the value of the "retweet" field in the mutation.
func (m *RetweetFeatureMutation) Retweet() (r bool, exists bool) {
	v := m.retweet
	if v == nil {
		return
	}
	return *v, true
}

// OldRetweet returns the old "retweet" field's value of the Retweet_feature entity.
// If the Retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetweetFeatureMutation) OldRetweet(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetweet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetweet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetweet: %w", err)
	}
	return oldValue.Retweet, nil
}

// ResetRetweet resets all changes to the "retweet" field.
func (m *RetweetFeatureMutation) ResetRetweet() {
	m.retweet = nil
}

// SetPostID sets the "post_id" field.
func (m *RetweetFeatureMutation) SetPostID(u uuid.UUID) {
	m.post_id = &u
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *RetweetFeatureMutation) PostID() (r uuid.UUID, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the Retweet_feature entity.
// If the Retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetweetFeatureMutation) OldPostID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// ResetPostID resets all changes to the "post_id" field.
func (m *RetweetFeatureMutation) ResetPostID() {
	m.post_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RetweetFeatureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RetweetFeatureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Retweet_feature entity.
// If the Retweet_feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RetweetFeatureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RetweetFeatureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the RetweetFeatureMutation builder.
func (m *RetweetFeatureMutation) Where(ps ...predicate.Retweet_feature) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RetweetFeatureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Retweet_feature).
func (m *RetweetFeatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RetweetFeatureMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.from_account_id != nil {
		fields = append(fields, retweet_feature.FieldFromAccountID)
	}
	if m.retweet != nil {
		fields = append(fields, retweet_feature.FieldRetweet)
	}
	if m.post_id != nil {
		fields = append(fields, retweet_feature.FieldPostID)
	}
	if m.created_at != nil {
		fields = append(fields, retweet_feature.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RetweetFeatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case retweet_feature.FieldFromAccountID:
		return m.FromAccountID()
	case retweet_feature.FieldRetweet:
		return m.Retweet()
	case retweet_feature.FieldPostID:
		return m.PostID()
	case retweet_feature.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RetweetFeatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case retweet_feature.FieldFromAccountID:
		return m.OldFromAccountID(ctx)
	case retweet_feature.FieldRetweet:
		return m.OldRetweet(ctx)
	case retweet_feature.FieldPostID:
		return m.OldPostID(ctx)
	case retweet_feature.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Retweet_feature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RetweetFeatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case retweet_feature.FieldFromAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAccountID(v)
		return nil
	case retweet_feature.FieldRetweet:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetweet(v)
		return nil
	case retweet_feature.FieldPostID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case retweet_feature.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Retweet_feature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RetweetFeatureMutation) AddedFields() []string {
	var fields []string
	if m.addfrom_account_id != nil {
		fields = append(fields, retweet_feature.FieldFromAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RetweetFeatureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case retweet_feature.FieldFromAccountID:
		return m.AddedFromAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RetweetFeatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	case retweet_feature.FieldFromAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown Retweet_feature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RetweetFeatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RetweetFeatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RetweetFeatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Retweet_feature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RetweetFeatureMutation) ResetField(name string) error {
	switch name {
	case retweet_feature.FieldFromAccountID:
		m.ResetFromAccountID()
		return nil
	case retweet_feature.FieldRetweet:
		m.ResetRetweet()
		return nil
	case retweet_feature.FieldPostID:
		m.ResetPostID()
		return nil
	case retweet_feature.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Retweet_feature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RetweetFeatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RetweetFeatureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RetweetFeatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RetweetFeatureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RetweetFeatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RetweetFeatureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RetweetFeatureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Retweet_feature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RetweetFeatureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Retweet_feature edge %s", name)
}

// TokensMutation represents an operation that mutates the Tokens nodes in the graph.
type TokensMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	email         *string
	access_token  *string
	refresh_token *string
	token_type    *string
	expiry        *time.Time
	raw           *map[string]interface{}
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Tokens, error)
	predicates    []predicate.Tokens
}

var _ ent.Mutation = (*TokensMutation)(nil)

// tokensOption allows management of the mutation configuration using functional options.
type tokensOption func(*TokensMutation)

// newTokensMutation creates new mutation for the Tokens entity.
func newTokensMutation(c config, op Op, opts ...tokensOption) *TokensMutation {
	m := &TokensMutation{
		config:        c,
		op:            op,
		typ:           TypeTokens,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokensID sets the ID field of the mutation.
func withTokensID(id uuid.UUID) tokensOption {
	return func(m *TokensMutation) {
		var (
			err   error
			once  sync.Once
			value *Tokens
		)
		m.oldValue = func(ctx context.Context) (*Tokens, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tokens.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTokens sets the old Tokens of the mutation.
func withTokens(node *Tokens) tokensOption {
	return func(m *TokensMutation) {
		m.oldValue = func(context.Context) (*Tokens, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokensMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokensMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Tokens entities.
func (m *TokensMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokensMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokensMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tokens.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *TokensMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *TokensMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Tokens entity.
// If the Tokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokensMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *TokensMutation) ResetEmail() {
	m.email = nil
}

// SetAccessToken sets the "access_token" field.
func (m *TokensMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *TokensMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the Tokens entity.
// If the Tokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokensMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *TokensMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *TokensMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *TokensMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the Tokens entity.
// If the Tokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokensMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *TokensMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetTokenType sets the "token_type" field.
func (m *TokensMutation) SetTokenType(s string) {
	m.token_type = &s
}

// TokenType returns the value of the "token_type" field in the mutation.
func (m *TokensMutation) TokenType() (r string, exists bool) {
	v := m.token_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenType returns the old "token_type" field's value of the Tokens entity.
// If the Tokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokensMutation) OldTokenType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenType: %w", err)
	}
	return oldValue.TokenType, nil
}

// ResetTokenType resets all changes to the "token_type" field.
func (m *TokensMutation) ResetTokenType() {
	m.token_type = nil
}

// SetExpiry sets the "expiry" field.
func (m *TokensMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *TokensMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the Tokens entity.
// If the Tokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokensMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *TokensMutation) ResetExpiry() {
	m.expiry = nil
}

// SetRaw sets the "raw" field.
func (m *TokensMutation) SetRaw(value map[string]interface{}) {
	m.raw = &value
}

// Raw returns the value of the "raw" field in the mutation.
func (m *TokensMutation) Raw() (r map[string]interface{}, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the Tokens entity.
// If the Tokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokensMutation) OldRaw(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *TokensMutation) ResetRaw() {
	m.raw = nil
}

// Where appends a list predicates to the TokensMutation builder.
func (m *TokensMutation) Where(ps ...predicate.Tokens) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TokensMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tokens).
func (m *TokensMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokensMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.email != nil {
		fields = append(fields, tokens.FieldEmail)
	}
	if m.access_token != nil {
		fields = append(fields, tokens.FieldAccessToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, tokens.FieldRefreshToken)
	}
	if m.token_type != nil {
		fields = append(fields, tokens.FieldTokenType)
	}
	if m.expiry != nil {
		fields = append(fields, tokens.FieldExpiry)
	}
	if m.raw != nil {
		fields = append(fields, tokens.FieldRaw)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokensMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tokens.FieldEmail:
		return m.Email()
	case tokens.FieldAccessToken:
		return m.AccessToken()
	case tokens.FieldRefreshToken:
		return m.RefreshToken()
	case tokens.FieldTokenType:
		return m.TokenType()
	case tokens.FieldExpiry:
		return m.Expiry()
	case tokens.FieldRaw:
		return m.Raw()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokensMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tokens.FieldEmail:
		return m.OldEmail(ctx)
	case tokens.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case tokens.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case tokens.FieldTokenType:
		return m.OldTokenType(ctx)
	case tokens.FieldExpiry:
		return m.OldExpiry(ctx)
	case tokens.FieldRaw:
		return m.OldRaw(ctx)
	}
	return nil, fmt.Errorf("unknown Tokens field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokensMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tokens.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case tokens.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case tokens.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case tokens.FieldTokenType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenType(v)
		return nil
	case tokens.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	case tokens.FieldRaw:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	}
	return fmt.Errorf("unknown Tokens field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokensMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokensMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokensMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tokens numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokensMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokensMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokensMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tokens nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokensMutation) ResetField(name string) error {
	switch name {
	case tokens.FieldEmail:
		m.ResetEmail()
		return nil
	case tokens.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case tokens.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case tokens.FieldTokenType:
		m.ResetTokenType()
		return nil
	case tokens.FieldExpiry:
		m.ResetExpiry()
		return nil
	case tokens.FieldRaw:
		m.ResetRaw()
		return nil
	}
	return fmt.Errorf("unknown Tokens field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokensMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokensMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokensMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokensMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokensMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokensMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokensMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tokens unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokensMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tokens edge %s", name)
}

// UsersMutation represents an operation that mutates the Users nodes in the graph.
type UsersMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	username            *string
	hashed_password     *string
	email               *string
	full_name           *string
	password_changed_at *time.Time
	created_at          *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Users, error)
	predicates          []predicate.Users
}

var _ ent.Mutation = (*UsersMutation)(nil)

// usersOption allows management of the mutation configuration using functional options.
type usersOption func(*UsersMutation)

// newUsersMutation creates new mutation for the Users entity.
func newUsersMutation(c config, op Op, opts ...usersOption) *UsersMutation {
	m := &UsersMutation{
		config:        c,
		op:            op,
		typ:           TypeUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUsersID sets the ID field of the mutation.
func withUsersID(id uuid.UUID) usersOption {
	return func(m *UsersMutation) {
		var (
			err   error
			once  sync.Once
			value *Users
		)
		m.oldValue = func(ctx context.Context) (*Users, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Users.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUsers sets the old Users of the mutation.
func withUsers(node *Users) usersOption {
	return func(m *UsersMutation) {
		m.oldValue = func(context.Context) (*Users, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Users entities.
func (m *UsersMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UsersMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UsersMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Users.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UsersMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UsersMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UsersMutation) ResetUsername() {
	m.username = nil
}

// SetHashedPassword sets the "hashed_password" field.
func (m *UsersMutation) SetHashedPassword(s string) {
	m.hashed_password = &s
}

// HashedPassword returns the value of the "hashed_password" field in the mutation.
func (m *UsersMutation) HashedPassword() (r string, exists bool) {
	v := m.hashed_password
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPassword returns the old "hashed_password" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldHashedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPassword: %w", err)
	}
	return oldValue.HashedPassword, nil
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (m *UsersMutation) ClearHashedPassword() {
	m.hashed_password = nil
	m.clearedFields[users.FieldHashedPassword] = struct{}{}
}

// HashedPasswordCleared returns if the "hashed_password" field was cleared in this mutation.
func (m *UsersMutation) HashedPasswordCleared() bool {
	_, ok := m.clearedFields[users.FieldHashedPassword]
	return ok
}

// ResetHashedPassword resets all changes to the "hashed_password" field.
func (m *UsersMutation) ResetHashedPassword() {
	m.hashed_password = nil
	delete(m.clearedFields, users.FieldHashedPassword)
}

// SetEmail sets the "email" field.
func (m *UsersMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UsersMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UsersMutation) ResetEmail() {
	m.email = nil
}

// SetFullName sets the "full_name" field.
func (m *UsersMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UsersMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UsersMutation) ResetFullName() {
	m.full_name = nil
}

// SetPasswordChangedAt sets the "password_changed_at" field.
func (m *UsersMutation) SetPasswordChangedAt(t time.Time) {
	m.password_changed_at = &t
}

// PasswordChangedAt returns the value of the "password_changed_at" field in the mutation.
func (m *UsersMutation) PasswordChangedAt() (r time.Time, exists bool) {
	v := m.password_changed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordChangedAt returns the old "password_changed_at" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldPasswordChangedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordChangedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordChangedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordChangedAt: %w", err)
	}
	return oldValue.PasswordChangedAt, nil
}

// ClearPasswordChangedAt clears the value of the "password_changed_at" field.
func (m *UsersMutation) ClearPasswordChangedAt() {
	m.password_changed_at = nil
	m.clearedFields[users.FieldPasswordChangedAt] = struct{}{}
}

// PasswordChangedAtCleared returns if the "password_changed_at" field was cleared in this mutation.
func (m *UsersMutation) PasswordChangedAtCleared() bool {
	_, ok := m.clearedFields[users.FieldPasswordChangedAt]
	return ok
}

// ResetPasswordChangedAt resets all changes to the "password_changed_at" field.
func (m *UsersMutation) ResetPasswordChangedAt() {
	m.password_changed_at = nil
	delete(m.clearedFields, users.FieldPasswordChangedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *UsersMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UsersMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Users entity.
// If the Users object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UsersMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UsersMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UsersMutation builder.
func (m *UsersMutation) Where(ps ...predicate.Users) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UsersMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Users).
func (m *UsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UsersMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.username != nil {
		fields = append(fields, users.FieldUsername)
	}
	if m.hashed_password != nil {
		fields = append(fields, users.FieldHashedPassword)
	}
	if m.email != nil {
		fields = append(fields, users.FieldEmail)
	}
	if m.full_name != nil {
		fields = append(fields, users.FieldFullName)
	}
	if m.password_changed_at != nil {
		fields = append(fields, users.FieldPasswordChangedAt)
	}
	if m.created_at != nil {
		fields = append(fields, users.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case users.FieldUsername:
		return m.Username()
	case users.FieldHashedPassword:
		return m.HashedPassword()
	case users.FieldEmail:
		return m.Email()
	case users.FieldFullName:
		return m.FullName()
	case users.FieldPasswordChangedAt:
		return m.PasswordChangedAt()
	case users.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case users.FieldUsername:
		return m.OldUsername(ctx)
	case users.FieldHashedPassword:
		return m.OldHashedPassword(ctx)
	case users.FieldEmail:
		return m.OldEmail(ctx)
	case users.FieldFullName:
		return m.OldFullName(ctx)
	case users.FieldPasswordChangedAt:
		return m.OldPasswordChangedAt(ctx)
	case users.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Users field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case users.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case users.FieldHashedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPassword(v)
		return nil
	case users.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case users.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case users.FieldPasswordChangedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordChangedAt(v)
		return nil
	case users.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UsersMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UsersMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Users numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UsersMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(users.FieldHashedPassword) {
		fields = append(fields, users.FieldHashedPassword)
	}
	if m.FieldCleared(users.FieldPasswordChangedAt) {
		fields = append(fields, users.FieldPasswordChangedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UsersMutation) ClearField(name string) error {
	switch name {
	case users.FieldHashedPassword:
		m.ClearHashedPassword()
		return nil
	case users.FieldPasswordChangedAt:
		m.ClearPasswordChangedAt()
		return nil
	}
	return fmt.Errorf("unknown Users nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UsersMutation) ResetField(name string) error {
	switch name {
	case users.FieldUsername:
		m.ResetUsername()
		return nil
	case users.FieldHashedPassword:
		m.ResetHashedPassword()
		return nil
	case users.FieldEmail:
		m.ResetEmail()
		return nil
	case users.FieldFullName:
		m.ResetFullName()
		return nil
	case users.FieldPasswordChangedAt:
		m.ResetPasswordChangedAt()
		return nil
	case users.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Users field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UsersMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UsersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UsersMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UsersMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Users unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UsersMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Users edge %s", name)
}
