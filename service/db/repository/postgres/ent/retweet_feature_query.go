// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/predicate"
	"github.com/peacewalker122/project/service/db/repository/postgres/ent/retweet_feature"
)

// RetweetFeatureQuery is the builder for querying Retweet_feature entities.
type RetweetFeatureQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Retweet_feature
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RetweetFeatureQuery builder.
func (rfq *RetweetFeatureQuery) Where(ps ...predicate.Retweet_feature) *RetweetFeatureQuery {
	rfq.predicates = append(rfq.predicates, ps...)
	return rfq
}

// Limit adds a limit step to the query.
func (rfq *RetweetFeatureQuery) Limit(limit int) *RetweetFeatureQuery {
	rfq.limit = &limit
	return rfq
}

// Offset adds an offset step to the query.
func (rfq *RetweetFeatureQuery) Offset(offset int) *RetweetFeatureQuery {
	rfq.offset = &offset
	return rfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rfq *RetweetFeatureQuery) Unique(unique bool) *RetweetFeatureQuery {
	rfq.unique = &unique
	return rfq
}

// Order adds an order step to the query.
func (rfq *RetweetFeatureQuery) Order(o ...OrderFunc) *RetweetFeatureQuery {
	rfq.order = append(rfq.order, o...)
	return rfq
}

// First returns the first Retweet_feature entity from the query.
// Returns a *NotFoundError when no Retweet_feature was found.
func (rfq *RetweetFeatureQuery) First(ctx context.Context) (*Retweet_feature, error) {
	nodes, err := rfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{retweet_feature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) FirstX(ctx context.Context) *Retweet_feature {
	node, err := rfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Retweet_feature ID from the query.
// Returns a *NotFoundError when no Retweet_feature ID was found.
func (rfq *RetweetFeatureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{retweet_feature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) FirstIDX(ctx context.Context) int {
	id, err := rfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Retweet_feature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Retweet_feature entity is found.
// Returns a *NotFoundError when no Retweet_feature entities are found.
func (rfq *RetweetFeatureQuery) Only(ctx context.Context) (*Retweet_feature, error) {
	nodes, err := rfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{retweet_feature.Label}
	default:
		return nil, &NotSingularError{retweet_feature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) OnlyX(ctx context.Context) *Retweet_feature {
	node, err := rfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Retweet_feature ID in the query.
// Returns a *NotSingularError when more than one Retweet_feature ID is found.
// Returns a *NotFoundError when no entities are found.
func (rfq *RetweetFeatureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{retweet_feature.Label}
	default:
		err = &NotSingularError{retweet_feature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) OnlyIDX(ctx context.Context) int {
	id, err := rfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Retweet_features.
func (rfq *RetweetFeatureQuery) All(ctx context.Context) ([]*Retweet_feature, error) {
	if err := rfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) AllX(ctx context.Context) []*Retweet_feature {
	nodes, err := rfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Retweet_feature IDs.
func (rfq *RetweetFeatureQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rfq.Select(retweet_feature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) IDsX(ctx context.Context) []int {
	ids, err := rfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rfq *RetweetFeatureQuery) Count(ctx context.Context) (int, error) {
	if err := rfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) CountX(ctx context.Context) int {
	count, err := rfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rfq *RetweetFeatureQuery) Exist(ctx context.Context) (bool, error) {
	if err := rfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rfq *RetweetFeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := rfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RetweetFeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rfq *RetweetFeatureQuery) Clone() *RetweetFeatureQuery {
	if rfq == nil {
		return nil
	}
	return &RetweetFeatureQuery{
		config:     rfq.config,
		limit:      rfq.limit,
		offset:     rfq.offset,
		order:      append([]OrderFunc{}, rfq.order...),
		predicates: append([]predicate.Retweet_feature{}, rfq.predicates...),
		// clone intermediate query.
		sql:    rfq.sql.Clone(),
		path:   rfq.path,
		unique: rfq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FromAccountID int64 `json:"from_account_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RetweetFeature.Query().
//		GroupBy(retweet_feature.FieldFromAccountID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rfq *RetweetFeatureQuery) GroupBy(field string, fields ...string) *RetweetFeatureGroupBy {
	grbuild := &RetweetFeatureGroupBy{config: rfq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rfq.sqlQuery(ctx), nil
	}
	grbuild.label = retweet_feature.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FromAccountID int64 `json:"from_account_id,omitempty"`
//	}
//
//	client.RetweetFeature.Query().
//		Select(retweet_feature.FieldFromAccountID).
//		Scan(ctx, &v)
func (rfq *RetweetFeatureQuery) Select(fields ...string) *RetweetFeatureSelect {
	rfq.fields = append(rfq.fields, fields...)
	selbuild := &RetweetFeatureSelect{RetweetFeatureQuery: rfq}
	selbuild.label = retweet_feature.Label
	selbuild.flds, selbuild.scan = &rfq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a RetweetFeatureSelect configured with the given aggregations.
func (rfq *RetweetFeatureQuery) Aggregate(fns ...AggregateFunc) *RetweetFeatureSelect {
	return rfq.Select().Aggregate(fns...)
}

func (rfq *RetweetFeatureQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rfq.fields {
		if !retweet_feature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rfq.path != nil {
		prev, err := rfq.path(ctx)
		if err != nil {
			return err
		}
		rfq.sql = prev
	}
	return nil
}

func (rfq *RetweetFeatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Retweet_feature, error) {
	var (
		nodes = []*Retweet_feature{}
		_spec = rfq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Retweet_feature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Retweet_feature{config: rfq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (rfq *RetweetFeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rfq.querySpec()
	_spec.Node.Columns = rfq.fields
	if len(rfq.fields) > 0 {
		_spec.Unique = rfq.unique != nil && *rfq.unique
	}
	return sqlgraph.CountNodes(ctx, rfq.driver, _spec)
}

func (rfq *RetweetFeatureQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := rfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (rfq *RetweetFeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   retweet_feature.Table,
			Columns: retweet_feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: retweet_feature.FieldID,
			},
		},
		From:   rfq.sql,
		Unique: true,
	}
	if unique := rfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retweet_feature.FieldID)
		for i := range fields {
			if fields[i] != retweet_feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rfq *RetweetFeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rfq.driver.Dialect())
	t1 := builder.Table(retweet_feature.Table)
	columns := rfq.fields
	if len(columns) == 0 {
		columns = retweet_feature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rfq.sql != nil {
		selector = rfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rfq.unique != nil && *rfq.unique {
		selector.Distinct()
	}
	for _, p := range rfq.predicates {
		p(selector)
	}
	for _, p := range rfq.order {
		p(selector)
	}
	if offset := rfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RetweetFeatureGroupBy is the group-by builder for Retweet_feature entities.
type RetweetFeatureGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rfgb *RetweetFeatureGroupBy) Aggregate(fns ...AggregateFunc) *RetweetFeatureGroupBy {
	rfgb.fns = append(rfgb.fns, fns...)
	return rfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rfgb *RetweetFeatureGroupBy) Scan(ctx context.Context, v any) error {
	query, err := rfgb.path(ctx)
	if err != nil {
		return err
	}
	rfgb.sql = query
	return rfgb.sqlScan(ctx, v)
}

func (rfgb *RetweetFeatureGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range rfgb.fields {
		if !retweet_feature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rfgb *RetweetFeatureGroupBy) sqlQuery() *sql.Selector {
	selector := rfgb.sql.Select()
	aggregation := make([]string, 0, len(rfgb.fns))
	for _, fn := range rfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rfgb.fields)+len(rfgb.fns))
		for _, f := range rfgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rfgb.fields...)...)
}

// RetweetFeatureSelect is the builder for selecting fields of RetweetFeature entities.
type RetweetFeatureSelect struct {
	*RetweetFeatureQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rfs *RetweetFeatureSelect) Aggregate(fns ...AggregateFunc) *RetweetFeatureSelect {
	rfs.fns = append(rfs.fns, fns...)
	return rfs
}

// Scan applies the selector query and scans the result into the given value.
func (rfs *RetweetFeatureSelect) Scan(ctx context.Context, v any) error {
	if err := rfs.prepareQuery(ctx); err != nil {
		return err
	}
	rfs.sql = rfs.RetweetFeatureQuery.sqlQuery(ctx)
	return rfs.sqlScan(ctx, v)
}

func (rfs *RetweetFeatureSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(rfs.fns))
	for _, fn := range rfs.fns {
		aggregation = append(aggregation, fn(rfs.sql))
	}
	switch n := len(*rfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		rfs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		rfs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := rfs.sql.Query()
	if err := rfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
