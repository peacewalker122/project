// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/repository/postgres/ent/notifread"
)

// NotifReadCreate is the builder for creating a NotifRead entity.
type NotifReadCreate struct {
	config
	mutation *NotifReadMutation
	hooks    []Hook
}

// SetNotifID sets the "notif_id" field.
func (nrc *NotifReadCreate) SetNotifID(u uuid.UUID) *NotifReadCreate {
	nrc.mutation.SetNotifID(u)
	return nrc
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (nrc *NotifReadCreate) SetNillableNotifID(u *uuid.UUID) *NotifReadCreate {
	if u != nil {
		nrc.SetNotifID(*u)
	}
	return nrc
}

// SetAccountID sets the "account_id" field.
func (nrc *NotifReadCreate) SetAccountID(i int64) *NotifReadCreate {
	nrc.mutation.SetAccountID(i)
	return nrc
}

// SetReadAt sets the "read_at" field.
func (nrc *NotifReadCreate) SetReadAt(t time.Time) *NotifReadCreate {
	nrc.mutation.SetReadAt(t)
	return nrc
}

// Mutation returns the NotifReadMutation object of the builder.
func (nrc *NotifReadCreate) Mutation() *NotifReadMutation {
	return nrc.mutation
}

// Save creates the NotifRead in the database.
func (nrc *NotifReadCreate) Save(ctx context.Context) (*NotifRead, error) {
	var (
		err  error
		node *NotifRead
	)
	nrc.defaults()
	if len(nrc.hooks) == 0 {
		if err = nrc.check(); err != nil {
			return nil, err
		}
		node, err = nrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifReadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nrc.check(); err != nil {
				return nil, err
			}
			nrc.mutation = mutation
			if node, err = nrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nrc.hooks) - 1; i >= 0; i-- {
			if nrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NotifRead)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifReadMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nrc *NotifReadCreate) SaveX(ctx context.Context) *NotifRead {
	v, err := nrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrc *NotifReadCreate) Exec(ctx context.Context) error {
	_, err := nrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrc *NotifReadCreate) ExecX(ctx context.Context) {
	if err := nrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nrc *NotifReadCreate) defaults() {
	if _, ok := nrc.mutation.NotifID(); !ok {
		v := notifread.DefaultNotifID()
		nrc.mutation.SetNotifID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nrc *NotifReadCreate) check() error {
	if _, ok := nrc.mutation.NotifID(); !ok {
		return &ValidationError{Name: "notif_id", err: errors.New(`ent: missing required field "NotifRead.notif_id"`)}
	}
	if _, ok := nrc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "NotifRead.account_id"`)}
	}
	if _, ok := nrc.mutation.ReadAt(); !ok {
		return &ValidationError{Name: "read_at", err: errors.New(`ent: missing required field "NotifRead.read_at"`)}
	}
	return nil
}

func (nrc *NotifReadCreate) sqlSave(ctx context.Context) (*NotifRead, error) {
	_node, _spec := nrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nrc *NotifReadCreate) createSpec() (*NotifRead, *sqlgraph.CreateSpec) {
	var (
		_node = &NotifRead{config: nrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notifread.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notifread.FieldID,
			},
		}
	)
	if value, ok := nrc.mutation.NotifID(); ok {
		_spec.SetField(notifread.FieldNotifID, field.TypeUUID, value)
		_node.NotifID = value
	}
	if value, ok := nrc.mutation.AccountID(); ok {
		_spec.SetField(notifread.FieldAccountID, field.TypeInt64, value)
		_node.AccountID = value
	}
	if value, ok := nrc.mutation.ReadAt(); ok {
		_spec.SetField(notifread.FieldReadAt, field.TypeTime, value)
		_node.ReadAt = &value
	}
	return _node, _spec
}

// NotifReadCreateBulk is the builder for creating many NotifRead entities in bulk.
type NotifReadCreateBulk struct {
	config
	builders []*NotifReadCreate
}

// Save creates the NotifRead entities in the database.
func (nrcb *NotifReadCreateBulk) Save(ctx context.Context) ([]*NotifRead, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nrcb.builders))
	nodes := make([]*NotifRead, len(nrcb.builders))
	mutators := make([]Mutator, len(nrcb.builders))
	for i := range nrcb.builders {
		func(i int, root context.Context) {
			builder := nrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifReadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nrcb *NotifReadCreateBulk) SaveX(ctx context.Context) []*NotifRead {
	v, err := nrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrcb *NotifReadCreateBulk) Exec(ctx context.Context) error {
	_, err := nrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrcb *NotifReadCreateBulk) ExecX(ctx context.Context) {
	if err := nrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
