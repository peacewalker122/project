// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/peacewalker122/project/db/repository/postgres/ent/predicate"
	"github.com/peacewalker122/project/db/repository/postgres/ent/users"
)

// UsersUpdate is the builder for updating Users entities.
type UsersUpdate struct {
	config
	hooks    []Hook
	mutation *UsersMutation
}

// Where appends a list predicates to the UsersUpdate builder.
func (uu *UsersUpdate) Where(ps ...predicate.Users) *UsersUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UsersUpdate) SetUsername(s string) *UsersUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetHashedPassword sets the "hashed_password" field.
func (uu *UsersUpdate) SetHashedPassword(s string) *UsersUpdate {
	uu.mutation.SetHashedPassword(s)
	return uu
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableHashedPassword(s *string) *UsersUpdate {
	if s != nil {
		uu.SetHashedPassword(*s)
	}
	return uu
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (uu *UsersUpdate) ClearHashedPassword() *UsersUpdate {
	uu.mutation.ClearHashedPassword()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UsersUpdate) SetEmail(s string) *UsersUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetFullName sets the "full_name" field.
func (uu *UsersUpdate) SetFullName(s string) *UsersUpdate {
	uu.mutation.SetFullName(s)
	return uu
}

// SetPasswordChangedAt sets the "password_changed_at" field.
func (uu *UsersUpdate) SetPasswordChangedAt(s string) *UsersUpdate {
	uu.mutation.SetPasswordChangedAt(s)
	return uu
}

// SetNillablePasswordChangedAt sets the "password_changed_at" field if the given value is not nil.
func (uu *UsersUpdate) SetNillablePasswordChangedAt(s *string) *UsersUpdate {
	if s != nil {
		uu.SetPasswordChangedAt(*s)
	}
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UsersUpdate) SetCreatedAt(s string) *UsersUpdate {
	uu.mutation.SetCreatedAt(s)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableCreatedAt(s *string) *UsersUpdate {
	if s != nil {
		uu.SetCreatedAt(*s)
	}
	return uu
}

// Mutation returns the UsersMutation object of the builder.
func (uu *UsersUpdate) Mutation() *UsersMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsersUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsersUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsersUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UsersUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := users.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Users.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.HashedPassword(); ok {
		if err := users.HashedPasswordValidator(v); err != nil {
			return &ValidationError{Name: "hashed_password", err: fmt.Errorf(`ent: validator failed for field "Users.hashed_password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Users.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FullName(); ok {
		if err := users.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Users.full_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswordChangedAt(); ok {
		if err := users.PasswordChangedAtValidator(v); err != nil {
			return &ValidationError{Name: "password_changed_at", err: fmt.Errorf(`ent: validator failed for field "Users.password_changed_at": %w`, err)}
		}
	}
	if v, ok := uu.mutation.CreatedAt(); ok {
		if err := users.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "created_at", err: fmt.Errorf(`ent: validator failed for field "Users.created_at": %w`, err)}
		}
	}
	return nil
}

func (uu *UsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   users.Table,
			Columns: users.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: users.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(users.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.HashedPassword(); ok {
		_spec.SetField(users.FieldHashedPassword, field.TypeString, value)
	}
	if uu.mutation.HashedPasswordCleared() {
		_spec.ClearField(users.FieldHashedPassword, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(users.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.FullName(); ok {
		_spec.SetField(users.FieldFullName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordChangedAt(); ok {
		_spec.SetField(users.FieldPasswordChangedAt, field.TypeString, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(users.FieldCreatedAt, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UsersUpdateOne is the builder for updating a single Users entity.
type UsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersMutation
}

// SetUsername sets the "username" field.
func (uuo *UsersUpdateOne) SetUsername(s string) *UsersUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetHashedPassword sets the "hashed_password" field.
func (uuo *UsersUpdateOne) SetHashedPassword(s string) *UsersUpdateOne {
	uuo.mutation.SetHashedPassword(s)
	return uuo
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableHashedPassword(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetHashedPassword(*s)
	}
	return uuo
}

// ClearHashedPassword clears the value of the "hashed_password" field.
func (uuo *UsersUpdateOne) ClearHashedPassword() *UsersUpdateOne {
	uuo.mutation.ClearHashedPassword()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UsersUpdateOne) SetEmail(s string) *UsersUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetFullName sets the "full_name" field.
func (uuo *UsersUpdateOne) SetFullName(s string) *UsersUpdateOne {
	uuo.mutation.SetFullName(s)
	return uuo
}

// SetPasswordChangedAt sets the "password_changed_at" field.
func (uuo *UsersUpdateOne) SetPasswordChangedAt(s string) *UsersUpdateOne {
	uuo.mutation.SetPasswordChangedAt(s)
	return uuo
}

// SetNillablePasswordChangedAt sets the "password_changed_at" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillablePasswordChangedAt(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetPasswordChangedAt(*s)
	}
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UsersUpdateOne) SetCreatedAt(s string) *UsersUpdateOne {
	uuo.mutation.SetCreatedAt(s)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableCreatedAt(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetCreatedAt(*s)
	}
	return uuo
}

// Mutation returns the UsersMutation object of the builder.
func (uuo *UsersUpdateOne) Mutation() *UsersMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsersUpdateOne) Select(field string, fields ...string) *UsersUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Users entity.
func (uuo *UsersUpdateOne) Save(ctx context.Context) (*Users, error) {
	var (
		err  error
		node *Users
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Users)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UsersMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsersUpdateOne) SaveX(ctx context.Context) *Users {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsersUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsersUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UsersUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := users.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Users.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.HashedPassword(); ok {
		if err := users.HashedPasswordValidator(v); err != nil {
			return &ValidationError{Name: "hashed_password", err: fmt.Errorf(`ent: validator failed for field "Users.hashed_password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Users.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FullName(); ok {
		if err := users.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Users.full_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswordChangedAt(); ok {
		if err := users.PasswordChangedAtValidator(v); err != nil {
			return &ValidationError{Name: "password_changed_at", err: fmt.Errorf(`ent: validator failed for field "Users.password_changed_at": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.CreatedAt(); ok {
		if err := users.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "created_at", err: fmt.Errorf(`ent: validator failed for field "Users.created_at": %w`, err)}
		}
	}
	return nil
}

func (uuo *UsersUpdateOne) sqlSave(ctx context.Context) (_node *Users, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   users.Table,
			Columns: users.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: users.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Users.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for _, f := range fields {
			if !users.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(users.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.HashedPassword(); ok {
		_spec.SetField(users.FieldHashedPassword, field.TypeString, value)
	}
	if uuo.mutation.HashedPasswordCleared() {
		_spec.ClearField(users.FieldHashedPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(users.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FullName(); ok {
		_spec.SetField(users.FieldFullName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordChangedAt(); ok {
		_spec.SetField(users.FieldPasswordChangedAt, field.TypeString, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(users.FieldCreatedAt, field.TypeString, value)
	}
	_node = &Users{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
