// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/repository/postgres/ent/tokens"
)

// Tokens is the model entity for the Tokens schema.
type Tokens struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType string `json:"token_type,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw map[string]interface{} `json:"raw,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tokens) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokens.FieldRaw:
			values[i] = new([]byte)
		case tokens.FieldEmail, tokens.FieldAccessToken, tokens.FieldRefreshToken, tokens.FieldTokenType:
			values[i] = new(sql.NullString)
		case tokens.FieldExpiry:
			values[i] = new(sql.NullTime)
		case tokens.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tokens", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tokens fields.
func (t *Tokens) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokens.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tokens.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				t.Email = value.String
			}
		case tokens.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				t.AccessToken = value.String
			}
		case tokens.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				t.RefreshToken = value.String
			}
		case tokens.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				t.TokenType = value.String
			}
		case tokens.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				t.Expiry = value.Time
			}
		case tokens.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Raw); err != nil {
					return fmt.Errorf("unmarshal field raw: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tokens.
// Note that you need to call Tokens.Unwrap() before calling this method if this Tokens
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tokens) Update() *TokensUpdateOne {
	return (&TokensClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tokens entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tokens) Unwrap() *Tokens {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tokens is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tokens) String() string {
	var builder strings.Builder
	builder.WriteString("Tokens(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("email=")
	builder.WriteString(t.Email)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(t.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(t.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(t.TokenType)
	builder.WriteString(", ")
	builder.WriteString("expiry=")
	builder.WriteString(t.Expiry.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", t.Raw))
	builder.WriteByte(')')
	return builder.String()
}

// TokensSlice is a parsable slice of Tokens.
type TokensSlice []*Tokens

func (t TokensSlice) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
