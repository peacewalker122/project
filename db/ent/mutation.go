// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/ent/notif"
	"github.com/peacewalker122/project/db/ent/notifread"
	"github.com/peacewalker122/project/db/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNotif     = "Notif"
	TypeNotifRead = "NotifRead"
)

// NotifMutation represents an operation that mutates the Notif nodes in the graph.
type NotifMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	account_id    *int64
	addaccount_id *int64
	notif_type    *string
	notif_title   *string
	notif_content *string
	notif_time    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Notif, error)
	predicates    []predicate.Notif
}

var _ ent.Mutation = (*NotifMutation)(nil)

// notifOption allows management of the mutation configuration using functional options.
type notifOption func(*NotifMutation)

// newNotifMutation creates new mutation for the Notif entity.
func newNotifMutation(c config, op Op, opts ...notifOption) *NotifMutation {
	m := &NotifMutation{
		config:        c,
		op:            op,
		typ:           TypeNotif,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotifID sets the ID field of the mutation.
func withNotifID(id uuid.UUID) notifOption {
	return func(m *NotifMutation) {
		var (
			err   error
			once  sync.Once
			value *Notif
		)
		m.oldValue = func(ctx context.Context) (*Notif, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notif.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotif sets the old Notif of the mutation.
func withNotif(node *Notif) notifOption {
	return func(m *NotifMutation) {
		m.oldValue = func(context.Context) (*Notif, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotifMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotifMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Notif entities.
func (m *NotifMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotifMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotifMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notif.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccountID sets the "account_id" field.
func (m *NotifMutation) SetAccountID(i int64) {
	m.account_id = &i
	m.addaccount_id = nil
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *NotifMutation) AccountID() (r int64, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldAccountID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// AddAccountID adds i to the "account_id" field.
func (m *NotifMutation) AddAccountID(i int64) {
	if m.addaccount_id != nil {
		*m.addaccount_id += i
	} else {
		m.addaccount_id = &i
	}
}

// AddedAccountID returns the value that was added to the "account_id" field in this mutation.
func (m *NotifMutation) AddedAccountID() (r int64, exists bool) {
	v := m.addaccount_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *NotifMutation) ResetAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
}

// SetNotifType sets the "notif_type" field.
func (m *NotifMutation) SetNotifType(s string) {
	m.notif_type = &s
}

// NotifType returns the value of the "notif_type" field in the mutation.
func (m *NotifMutation) NotifType() (r string, exists bool) {
	v := m.notif_type
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifType returns the old "notif_type" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldNotifType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifType: %w", err)
	}
	return oldValue.NotifType, nil
}

// ResetNotifType resets all changes to the "notif_type" field.
func (m *NotifMutation) ResetNotifType() {
	m.notif_type = nil
}

// SetNotifTitle sets the "notif_title" field.
func (m *NotifMutation) SetNotifTitle(s string) {
	m.notif_title = &s
}

// NotifTitle returns the value of the "notif_title" field in the mutation.
func (m *NotifMutation) NotifTitle() (r string, exists bool) {
	v := m.notif_title
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifTitle returns the old "notif_title" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldNotifTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifTitle: %w", err)
	}
	return oldValue.NotifTitle, nil
}

// ClearNotifTitle clears the value of the "notif_title" field.
func (m *NotifMutation) ClearNotifTitle() {
	m.notif_title = nil
	m.clearedFields[notif.FieldNotifTitle] = struct{}{}
}

// NotifTitleCleared returns if the "notif_title" field was cleared in this mutation.
func (m *NotifMutation) NotifTitleCleared() bool {
	_, ok := m.clearedFields[notif.FieldNotifTitle]
	return ok
}

// ResetNotifTitle resets all changes to the "notif_title" field.
func (m *NotifMutation) ResetNotifTitle() {
	m.notif_title = nil
	delete(m.clearedFields, notif.FieldNotifTitle)
}

// SetNotifContent sets the "notif_content" field.
func (m *NotifMutation) SetNotifContent(s string) {
	m.notif_content = &s
}

// NotifContent returns the value of the "notif_content" field in the mutation.
func (m *NotifMutation) NotifContent() (r string, exists bool) {
	v := m.notif_content
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifContent returns the old "notif_content" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldNotifContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifContent: %w", err)
	}
	return oldValue.NotifContent, nil
}

// ClearNotifContent clears the value of the "notif_content" field.
func (m *NotifMutation) ClearNotifContent() {
	m.notif_content = nil
	m.clearedFields[notif.FieldNotifContent] = struct{}{}
}

// NotifContentCleared returns if the "notif_content" field was cleared in this mutation.
func (m *NotifMutation) NotifContentCleared() bool {
	_, ok := m.clearedFields[notif.FieldNotifContent]
	return ok
}

// ResetNotifContent resets all changes to the "notif_content" field.
func (m *NotifMutation) ResetNotifContent() {
	m.notif_content = nil
	delete(m.clearedFields, notif.FieldNotifContent)
}

// SetNotifTime sets the "notif_time" field.
func (m *NotifMutation) SetNotifTime(t time.Time) {
	m.notif_time = &t
}

// NotifTime returns the value of the "notif_time" field in the mutation.
func (m *NotifMutation) NotifTime() (r time.Time, exists bool) {
	v := m.notif_time
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifTime returns the old "notif_time" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldNotifTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifTime: %w", err)
	}
	return oldValue.NotifTime, nil
}

// ClearNotifTime clears the value of the "notif_time" field.
func (m *NotifMutation) ClearNotifTime() {
	m.notif_time = nil
	m.clearedFields[notif.FieldNotifTime] = struct{}{}
}

// NotifTimeCleared returns if the "notif_time" field was cleared in this mutation.
func (m *NotifMutation) NotifTimeCleared() bool {
	_, ok := m.clearedFields[notif.FieldNotifTime]
	return ok
}

// ResetNotifTime resets all changes to the "notif_time" field.
func (m *NotifMutation) ResetNotifTime() {
	m.notif_time = nil
	delete(m.clearedFields, notif.FieldNotifTime)
}

// SetCreatedAt sets the "created_at" field.
func (m *NotifMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotifMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotifMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the NotifMutation builder.
func (m *NotifMutation) Where(ps ...predicate.Notif) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotifMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Notif).
func (m *NotifMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotifMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.account_id != nil {
		fields = append(fields, notif.FieldAccountID)
	}
	if m.notif_type != nil {
		fields = append(fields, notif.FieldNotifType)
	}
	if m.notif_title != nil {
		fields = append(fields, notif.FieldNotifTitle)
	}
	if m.notif_content != nil {
		fields = append(fields, notif.FieldNotifContent)
	}
	if m.notif_time != nil {
		fields = append(fields, notif.FieldNotifTime)
	}
	if m.created_at != nil {
		fields = append(fields, notif.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotifMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notif.FieldAccountID:
		return m.AccountID()
	case notif.FieldNotifType:
		return m.NotifType()
	case notif.FieldNotifTitle:
		return m.NotifTitle()
	case notif.FieldNotifContent:
		return m.NotifContent()
	case notif.FieldNotifTime:
		return m.NotifTime()
	case notif.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotifMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notif.FieldAccountID:
		return m.OldAccountID(ctx)
	case notif.FieldNotifType:
		return m.OldNotifType(ctx)
	case notif.FieldNotifTitle:
		return m.OldNotifTitle(ctx)
	case notif.FieldNotifContent:
		return m.OldNotifContent(ctx)
	case notif.FieldNotifTime:
		return m.OldNotifTime(ctx)
	case notif.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Notif field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notif.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case notif.FieldNotifType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifType(v)
		return nil
	case notif.FieldNotifTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifTitle(v)
		return nil
	case notif.FieldNotifContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifContent(v)
		return nil
	case notif.FieldNotifTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifTime(v)
		return nil
	case notif.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notif field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotifMutation) AddedFields() []string {
	var fields []string
	if m.addaccount_id != nil {
		fields = append(fields, notif.FieldAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotifMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notif.FieldAccountID:
		return m.AddedAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notif.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown Notif numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotifMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notif.FieldNotifTitle) {
		fields = append(fields, notif.FieldNotifTitle)
	}
	if m.FieldCleared(notif.FieldNotifContent) {
		fields = append(fields, notif.FieldNotifContent)
	}
	if m.FieldCleared(notif.FieldNotifTime) {
		fields = append(fields, notif.FieldNotifTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotifMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotifMutation) ClearField(name string) error {
	switch name {
	case notif.FieldNotifTitle:
		m.ClearNotifTitle()
		return nil
	case notif.FieldNotifContent:
		m.ClearNotifContent()
		return nil
	case notif.FieldNotifTime:
		m.ClearNotifTime()
		return nil
	}
	return fmt.Errorf("unknown Notif nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotifMutation) ResetField(name string) error {
	switch name {
	case notif.FieldAccountID:
		m.ResetAccountID()
		return nil
	case notif.FieldNotifType:
		m.ResetNotifType()
		return nil
	case notif.FieldNotifTitle:
		m.ResetNotifTitle()
		return nil
	case notif.FieldNotifContent:
		m.ResetNotifContent()
		return nil
	case notif.FieldNotifTime:
		m.ResetNotifTime()
		return nil
	case notif.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Notif field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotifMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotifMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotifMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotifMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotifMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotifMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotifMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Notif unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotifMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Notif edge %s", name)
}

// NotifReadMutation represents an operation that mutates the NotifRead nodes in the graph.
type NotifReadMutation struct {
	config
	op            Op
	typ           string
	id            *int
	notif_id      *uuid.UUID
	account_id    *int64
	addaccount_id *int64
	read_at       *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NotifRead, error)
	predicates    []predicate.NotifRead
}

var _ ent.Mutation = (*NotifReadMutation)(nil)

// notifreadOption allows management of the mutation configuration using functional options.
type notifreadOption func(*NotifReadMutation)

// newNotifReadMutation creates new mutation for the NotifRead entity.
func newNotifReadMutation(c config, op Op, opts ...notifreadOption) *NotifReadMutation {
	m := &NotifReadMutation{
		config:        c,
		op:            op,
		typ:           TypeNotifRead,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotifReadID sets the ID field of the mutation.
func withNotifReadID(id int) notifreadOption {
	return func(m *NotifReadMutation) {
		var (
			err   error
			once  sync.Once
			value *NotifRead
		)
		m.oldValue = func(ctx context.Context) (*NotifRead, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NotifRead.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotifRead sets the old NotifRead of the mutation.
func withNotifRead(node *NotifRead) notifreadOption {
	return func(m *NotifReadMutation) {
		m.oldValue = func(context.Context) (*NotifRead, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotifReadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotifReadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotifReadMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotifReadMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NotifRead.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNotifID sets the "notif_id" field.
func (m *NotifReadMutation) SetNotifID(u uuid.UUID) {
	m.notif_id = &u
}

// NotifID returns the value of the "notif_id" field in the mutation.
func (m *NotifReadMutation) NotifID() (r uuid.UUID, exists bool) {
	v := m.notif_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifID returns the old "notif_id" field's value of the NotifRead entity.
// If the NotifRead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifReadMutation) OldNotifID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifID: %w", err)
	}
	return oldValue.NotifID, nil
}

// ResetNotifID resets all changes to the "notif_id" field.
func (m *NotifReadMutation) ResetNotifID() {
	m.notif_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *NotifReadMutation) SetAccountID(i int64) {
	m.account_id = &i
	m.addaccount_id = nil
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *NotifReadMutation) AccountID() (r int64, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the NotifRead entity.
// If the NotifRead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifReadMutation) OldAccountID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// AddAccountID adds i to the "account_id" field.
func (m *NotifReadMutation) AddAccountID(i int64) {
	if m.addaccount_id != nil {
		*m.addaccount_id += i
	} else {
		m.addaccount_id = &i
	}
}

// AddedAccountID returns the value that was added to the "account_id" field in this mutation.
func (m *NotifReadMutation) AddedAccountID() (r int64, exists bool) {
	v := m.addaccount_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *NotifReadMutation) ResetAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
}

// SetReadAt sets the "read_at" field.
func (m *NotifReadMutation) SetReadAt(t time.Time) {
	m.read_at = &t
}

// ReadAt returns the value of the "read_at" field in the mutation.
func (m *NotifReadMutation) ReadAt() (r time.Time, exists bool) {
	v := m.read_at
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "read_at" field's value of the NotifRead entity.
// If the NotifRead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifReadMutation) OldReadAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ResetReadAt resets all changes to the "read_at" field.
func (m *NotifReadMutation) ResetReadAt() {
	m.read_at = nil
}

// Where appends a list predicates to the NotifReadMutation builder.
func (m *NotifReadMutation) Where(ps ...predicate.NotifRead) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotifReadMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NotifRead).
func (m *NotifReadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotifReadMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.notif_id != nil {
		fields = append(fields, notifread.FieldNotifID)
	}
	if m.account_id != nil {
		fields = append(fields, notifread.FieldAccountID)
	}
	if m.read_at != nil {
		fields = append(fields, notifread.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotifReadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notifread.FieldNotifID:
		return m.NotifID()
	case notifread.FieldAccountID:
		return m.AccountID()
	case notifread.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotifReadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notifread.FieldNotifID:
		return m.OldNotifID(ctx)
	case notifread.FieldAccountID:
		return m.OldAccountID(ctx)
	case notifread.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown NotifRead field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifReadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notifread.FieldNotifID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifID(v)
		return nil
	case notifread.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case notifread.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown NotifRead field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotifReadMutation) AddedFields() []string {
	var fields []string
	if m.addaccount_id != nil {
		fields = append(fields, notifread.FieldAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotifReadMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notifread.FieldAccountID:
		return m.AddedAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifReadMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notifread.FieldAccountID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown NotifRead numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotifReadMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotifReadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotifReadMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NotifRead nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotifReadMutation) ResetField(name string) error {
	switch name {
	case notifread.FieldNotifID:
		m.ResetNotifID()
		return nil
	case notifread.FieldAccountID:
		m.ResetAccountID()
		return nil
	case notifread.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown NotifRead field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotifReadMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotifReadMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotifReadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotifReadMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotifReadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotifReadMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotifReadMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NotifRead unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotifReadMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NotifRead edge %s", name)
}
