// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/ent/notif"
)

// Notif is the model entity for the Notif schema.
type Notif struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int64 `json:"account_id,omitempty"`
	// NotifType holds the value of the "notif_type" field.
	NotifType string `json:"notif_type,omitempty"`
	// NotifTitle holds the value of the "notif_title" field.
	NotifTitle string `json:"notif_title,omitempty"`
	// NotifContent holds the value of the "notif_content" field.
	NotifContent string `json:"notif_content,omitempty"`
	// for deploy purpose
	NotifTime *time.Time `json:"notif_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notif) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notif.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case notif.FieldNotifType, notif.FieldNotifTitle, notif.FieldNotifContent:
			values[i] = new(sql.NullString)
		case notif.FieldNotifTime, notif.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case notif.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notif", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notif fields.
func (n *Notif) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notif.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case notif.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				n.AccountID = value.Int64
			}
		case notif.FieldNotifType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_type", values[i])
			} else if value.Valid {
				n.NotifType = value.String
			}
		case notif.FieldNotifTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_title", values[i])
			} else if value.Valid {
				n.NotifTitle = value.String
			}
		case notif.FieldNotifContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_content", values[i])
			} else if value.Valid {
				n.NotifContent = value.String
			}
		case notif.FieldNotifTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notif_time", values[i])
			} else if value.Valid {
				n.NotifTime = new(time.Time)
				*n.NotifTime = value.Time
			}
		case notif.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Notif.
// Note that you need to call Notif.Unwrap() before calling this method if this Notif
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notif) Update() *NotifUpdateOne {
	return (&NotifClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Notif entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notif) Unwrap() *Notif {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notif is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notif) String() string {
	var builder strings.Builder
	builder.WriteString("Notif(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", n.AccountID))
	builder.WriteString(", ")
	builder.WriteString("notif_type=")
	builder.WriteString(n.NotifType)
	builder.WriteString(", ")
	builder.WriteString("notif_title=")
	builder.WriteString(n.NotifTitle)
	builder.WriteString(", ")
	builder.WriteString("notif_content=")
	builder.WriteString(n.NotifContent)
	builder.WriteString(", ")
	if v := n.NotifTime; v != nil {
		builder.WriteString("notif_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notifs is a parsable slice of Notif.
type Notifs []*Notif

func (n Notifs) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
