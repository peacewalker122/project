// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/ent/accountnotifs"
)

// AccountNotifsCreate is the builder for creating a AccountNotifs entity.
type AccountNotifsCreate struct {
	config
	mutation *AccountNotifsMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (anc *AccountNotifsCreate) SetAccountID(i int64) *AccountNotifsCreate {
	anc.mutation.SetAccountID(i)
	return anc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableAccountID(i *int64) *AccountNotifsCreate {
	if i != nil {
		anc.SetAccountID(*i)
	}
	return anc
}

// SetNotifType sets the "notif_type" field.
func (anc *AccountNotifsCreate) SetNotifType(s string) *AccountNotifsCreate {
	anc.mutation.SetNotifType(s)
	return anc
}

// SetNotifTitle sets the "notif_title" field.
func (anc *AccountNotifsCreate) SetNotifTitle(s string) *AccountNotifsCreate {
	anc.mutation.SetNotifTitle(s)
	return anc
}

// SetNillableNotifTitle sets the "notif_title" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableNotifTitle(s *string) *AccountNotifsCreate {
	if s != nil {
		anc.SetNotifTitle(*s)
	}
	return anc
}

// SetNotifContent sets the "notif_content" field.
func (anc *AccountNotifsCreate) SetNotifContent(s string) *AccountNotifsCreate {
	anc.mutation.SetNotifContent(s)
	return anc
}

// SetNillableNotifContent sets the "notif_content" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableNotifContent(s *string) *AccountNotifsCreate {
	if s != nil {
		anc.SetNotifContent(*s)
	}
	return anc
}

// SetNotifTime sets the "notif_time" field.
func (anc *AccountNotifsCreate) SetNotifTime(t time.Time) *AccountNotifsCreate {
	anc.mutation.SetNotifTime(t)
	return anc
}

// SetNillableNotifTime sets the "notif_time" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableNotifTime(t *time.Time) *AccountNotifsCreate {
	if t != nil {
		anc.SetNotifTime(*t)
	}
	return anc
}

// SetUsername sets the "username" field.
func (anc *AccountNotifsCreate) SetUsername(s string) *AccountNotifsCreate {
	anc.mutation.SetUsername(s)
	return anc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableUsername(s *string) *AccountNotifsCreate {
	if s != nil {
		anc.SetUsername(*s)
	}
	return anc
}

// SetCreatedAt sets the "created_at" field.
func (anc *AccountNotifsCreate) SetCreatedAt(t time.Time) *AccountNotifsCreate {
	anc.mutation.SetCreatedAt(t)
	return anc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableCreatedAt(t *time.Time) *AccountNotifsCreate {
	if t != nil {
		anc.SetCreatedAt(*t)
	}
	return anc
}

// SetID sets the "id" field.
func (anc *AccountNotifsCreate) SetID(u uuid.UUID) *AccountNotifsCreate {
	anc.mutation.SetID(u)
	return anc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (anc *AccountNotifsCreate) SetNillableID(u *uuid.UUID) *AccountNotifsCreate {
	if u != nil {
		anc.SetID(*u)
	}
	return anc
}

// Mutation returns the AccountNotifsMutation object of the builder.
func (anc *AccountNotifsCreate) Mutation() *AccountNotifsMutation {
	return anc.mutation
}

// Save creates the AccountNotifs in the database.
func (anc *AccountNotifsCreate) Save(ctx context.Context) (*AccountNotifs, error) {
	var (
		err  error
		node *AccountNotifs
	)
	anc.defaults()
	if len(anc.hooks) == 0 {
		if err = anc.check(); err != nil {
			return nil, err
		}
		node, err = anc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountNotifsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = anc.check(); err != nil {
				return nil, err
			}
			anc.mutation = mutation
			if node, err = anc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(anc.hooks) - 1; i >= 0; i-- {
			if anc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = anc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, anc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AccountNotifs)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountNotifsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (anc *AccountNotifsCreate) SaveX(ctx context.Context) *AccountNotifs {
	v, err := anc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (anc *AccountNotifsCreate) Exec(ctx context.Context) error {
	_, err := anc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anc *AccountNotifsCreate) ExecX(ctx context.Context) {
	if err := anc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (anc *AccountNotifsCreate) defaults() {
	if _, ok := anc.mutation.NotifTime(); !ok {
		v := accountnotifs.DefaultNotifTime()
		anc.mutation.SetNotifTime(v)
	}
	if _, ok := anc.mutation.CreatedAt(); !ok {
		v := accountnotifs.DefaultCreatedAt()
		anc.mutation.SetCreatedAt(v)
	}
	if _, ok := anc.mutation.ID(); !ok {
		v := accountnotifs.DefaultID()
		anc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anc *AccountNotifsCreate) check() error {
	if _, ok := anc.mutation.NotifType(); !ok {
		return &ValidationError{Name: "notif_type", err: errors.New(`ent: missing required field "AccountNotifs.notif_type"`)}
	}
	if v, ok := anc.mutation.NotifType(); ok {
		if err := accountnotifs.NotifTypeValidator(v); err != nil {
			return &ValidationError{Name: "notif_type", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_type": %w`, err)}
		}
	}
	if v, ok := anc.mutation.NotifTitle(); ok {
		if err := accountnotifs.NotifTitleValidator(v); err != nil {
			return &ValidationError{Name: "notif_title", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_title": %w`, err)}
		}
	}
	if v, ok := anc.mutation.NotifContent(); ok {
		if err := accountnotifs.NotifContentValidator(v); err != nil {
			return &ValidationError{Name: "notif_content", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.notif_content": %w`, err)}
		}
	}
	if v, ok := anc.mutation.Username(); ok {
		if err := accountnotifs.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "AccountNotifs.username": %w`, err)}
		}
	}
	if _, ok := anc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccountNotifs.created_at"`)}
	}
	return nil
}

func (anc *AccountNotifsCreate) sqlSave(ctx context.Context) (*AccountNotifs, error) {
	_node, _spec := anc.createSpec()
	if err := sqlgraph.CreateNode(ctx, anc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (anc *AccountNotifsCreate) createSpec() (*AccountNotifs, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountNotifs{config: anc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accountnotifs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: accountnotifs.FieldID,
			},
		}
	)
	if id, ok := anc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := anc.mutation.AccountID(); ok {
		_spec.SetField(accountnotifs.FieldAccountID, field.TypeInt64, value)
		_node.AccountID = &value
	}
	if value, ok := anc.mutation.NotifType(); ok {
		_spec.SetField(accountnotifs.FieldNotifType, field.TypeString, value)
		_node.NotifType = value
	}
	if value, ok := anc.mutation.NotifTitle(); ok {
		_spec.SetField(accountnotifs.FieldNotifTitle, field.TypeString, value)
		_node.NotifTitle = value
	}
	if value, ok := anc.mutation.NotifContent(); ok {
		_spec.SetField(accountnotifs.FieldNotifContent, field.TypeString, value)
		_node.NotifContent = value
	}
	if value, ok := anc.mutation.NotifTime(); ok {
		_spec.SetField(accountnotifs.FieldNotifTime, field.TypeTime, value)
		_node.NotifTime = &value
	}
	if value, ok := anc.mutation.Username(); ok {
		_spec.SetField(accountnotifs.FieldUsername, field.TypeString, value)
		_node.Username = &value
	}
	if value, ok := anc.mutation.CreatedAt(); ok {
		_spec.SetField(accountnotifs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// AccountNotifsCreateBulk is the builder for creating many AccountNotifs entities in bulk.
type AccountNotifsCreateBulk struct {
	config
	builders []*AccountNotifsCreate
}

// Save creates the AccountNotifs entities in the database.
func (ancb *AccountNotifsCreateBulk) Save(ctx context.Context) ([]*AccountNotifs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ancb.builders))
	nodes := make([]*AccountNotifs, len(ancb.builders))
	mutators := make([]Mutator, len(ancb.builders))
	for i := range ancb.builders {
		func(i int, root context.Context) {
			builder := ancb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountNotifsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ancb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ancb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ancb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ancb *AccountNotifsCreateBulk) SaveX(ctx context.Context) []*AccountNotifs {
	v, err := ancb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ancb *AccountNotifsCreateBulk) Exec(ctx context.Context) error {
	_, err := ancb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ancb *AccountNotifsCreateBulk) ExecX(ctx context.Context) {
	if err := ancb.Exec(ctx); err != nil {
		panic(err)
	}
}
