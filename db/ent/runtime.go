// +build tools
// +build tools
// +build tools
// +build tools
// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/ent/accountnotif"
	"github.com/peacewalker122/project/db/ent/notifread"
	"github.com/peacewalker122/project/db/ent/schema"
	"github.com/peacewalker122/project/db/ent/tokens"
	"github.com/peacewalker122/project/db/ent/users"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountnotifFields := schema.AccountNotif{}.Fields()
	_ = accountnotifFields
	// accountnotifDescNotifType is the schema descriptor for notif_type field.
	accountnotifDescNotifType := accountnotifFields[2].Descriptor()
	// accountnotif.NotifTypeValidator is a validator for the "notif_type" field. It is called by the builders before save.
	accountnotif.NotifTypeValidator = accountnotifDescNotifType.Validators[0].(func(string) error)
	// accountnotifDescNotifTitle is the schema descriptor for notif_title field.
	accountnotifDescNotifTitle := accountnotifFields[3].Descriptor()
	// accountnotif.NotifTitleValidator is a validator for the "notif_title" field. It is called by the builders before save.
	accountnotif.NotifTitleValidator = accountnotifDescNotifTitle.Validators[0].(func(string) error)
	// accountnotifDescNotifContent is the schema descriptor for notif_content field.
	accountnotifDescNotifContent := accountnotifFields[4].Descriptor()
	// accountnotif.NotifContentValidator is a validator for the "notif_content" field. It is called by the builders before save.
	accountnotif.NotifContentValidator = accountnotifDescNotifContent.Validators[0].(func(string) error)
	// accountnotifDescNotifTime is the schema descriptor for notif_time field.
	accountnotifDescNotifTime := accountnotifFields[5].Descriptor()
	// accountnotif.DefaultNotifTime holds the default value on creation for the notif_time field.
	accountnotif.DefaultNotifTime = accountnotifDescNotifTime.Default.(func() time.Time)
	// accountnotifDescCreatedAt is the schema descriptor for created_at field.
	accountnotifDescCreatedAt := accountnotifFields[6].Descriptor()
	// accountnotif.DefaultCreatedAt holds the default value on creation for the created_at field.
	accountnotif.DefaultCreatedAt = accountnotifDescCreatedAt.Default.(func() time.Time)
	// accountnotifDescID is the schema descriptor for id field.
	accountnotifDescID := accountnotifFields[0].Descriptor()
	// accountnotif.DefaultID holds the default value on creation for the id field.
	accountnotif.DefaultID = accountnotifDescID.Default.(func() uuid.UUID)
	notifreadFields := schema.NotifRead{}.Fields()
	_ = notifreadFields
	// notifreadDescNotifID is the schema descriptor for notif_id field.
	notifreadDescNotifID := notifreadFields[0].Descriptor()
	// notifread.DefaultNotifID holds the default value on creation for the notif_id field.
	notifread.DefaultNotifID = notifreadDescNotifID.Default.(func() uuid.UUID)
	tokensFields := schema.Tokens{}.Fields()
	_ = tokensFields
	// tokensDescEmail is the schema descriptor for email field.
	tokensDescEmail := tokensFields[1].Descriptor()
	// tokens.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	tokens.EmailValidator = func() func(string) error {
		validators := tokensDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokensDescAccessToken is the schema descriptor for access_token field.
	tokensDescAccessToken := tokensFields[2].Descriptor()
	// tokens.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	tokens.AccessTokenValidator = tokensDescAccessToken.Validators[0].(func(string) error)
	// tokensDescTokenType is the schema descriptor for token_type field.
	tokensDescTokenType := tokensFields[4].Descriptor()
	// tokens.TokenTypeValidator is a validator for the "token_type" field. It is called by the builders before save.
	tokens.TokenTypeValidator = tokensDescTokenType.Validators[0].(func(string) error)
	// tokensDescID is the schema descriptor for id field.
	tokensDescID := tokensFields[0].Descriptor()
	// tokens.DefaultID holds the default value on creation for the id field.
	tokens.DefaultID = tokensDescID.Default.(func() uuid.UUID)
	usersFields := schema.Users{}.Fields()
	_ = usersFields
	// usersDescUsername is the schema descriptor for username field.
	usersDescUsername := usersFields[1].Descriptor()
	// users.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	users.UsernameValidator = usersDescUsername.Validators[0].(func(string) error)
	// usersDescHashedPassword is the schema descriptor for hashed_password field.
	usersDescHashedPassword := usersFields[2].Descriptor()
	// users.HashedPasswordValidator is a validator for the "hashed_password" field. It is called by the builders before save.
	users.HashedPasswordValidator = usersDescHashedPassword.Validators[0].(func(string) error)
	// usersDescEmail is the schema descriptor for email field.
	usersDescEmail := usersFields[3].Descriptor()
	// users.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	users.EmailValidator = usersDescEmail.Validators[0].(func(string) error)
	// usersDescFullName is the schema descriptor for full_name field.
	usersDescFullName := usersFields[4].Descriptor()
	// users.FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	users.FullNameValidator = usersDescFullName.Validators[0].(func(string) error)
	// usersDescPasswordChangedAt is the schema descriptor for password_changed_at field.
	usersDescPasswordChangedAt := usersFields[5].Descriptor()
	// users.DefaultPasswordChangedAt holds the default value on creation for the password_changed_at field.
	users.DefaultPasswordChangedAt = usersDescPasswordChangedAt.Default.(string)
	// users.PasswordChangedAtValidator is a validator for the "password_changed_at" field. It is called by the builders before save.
	users.PasswordChangedAtValidator = usersDescPasswordChangedAt.Validators[0].(func(string) error)
	// usersDescCreatedAt is the schema descriptor for created_at field.
	usersDescCreatedAt := usersFields[6].Descriptor()
	// users.DefaultCreatedAt holds the default value on creation for the created_at field.
	users.DefaultCreatedAt = usersDescCreatedAt.Default.(string)
	// users.CreatedAtValidator is a validator for the "created_at" field. It is called by the builders before save.
	users.CreatedAtValidator = usersDescCreatedAt.Validators[0].(func(string) error)
	// usersDescID is the schema descriptor for id field.
	usersDescID := usersFields[0].Descriptor()
	// users.DefaultID holds the default value on creation for the id field.
	users.DefaultID = usersDescID.Default.(func() uuid.UUID)
}
