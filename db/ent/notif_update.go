// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/ent/notif"
	"github.com/peacewalker122/project/db/ent/predicate"
)

// NotifUpdate is the builder for updating Notif entities.
type NotifUpdate struct {
	config
	hooks    []Hook
	mutation *NotifMutation
}

// Where appends a list predicates to the NotifUpdate builder.
func (nu *NotifUpdate) Where(ps ...predicate.Notif) *NotifUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetNotifID sets the "notif_id" field.
func (nu *NotifUpdate) SetNotifID(u uuid.UUID) *NotifUpdate {
	nu.mutation.SetNotifID(u)
	return nu
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (nu *NotifUpdate) SetNillableNotifID(u *uuid.UUID) *NotifUpdate {
	if u != nil {
		nu.SetNotifID(*u)
	}
	return nu
}

// SetAccountID sets the "account_id" field.
func (nu *NotifUpdate) SetAccountID(i int64) *NotifUpdate {
	nu.mutation.ResetAccountID()
	nu.mutation.SetAccountID(i)
	return nu
}

// AddAccountID adds i to the "account_id" field.
func (nu *NotifUpdate) AddAccountID(i int64) *NotifUpdate {
	nu.mutation.AddAccountID(i)
	return nu
}

// SetNotifType sets the "notif_type" field.
func (nu *NotifUpdate) SetNotifType(s string) *NotifUpdate {
	nu.mutation.SetNotifType(s)
	return nu
}

// SetNotifTitle sets the "notif_title" field.
func (nu *NotifUpdate) SetNotifTitle(s string) *NotifUpdate {
	nu.mutation.SetNotifTitle(s)
	return nu
}

// SetNotifContent sets the "notif_content" field.
func (nu *NotifUpdate) SetNotifContent(s string) *NotifUpdate {
	nu.mutation.SetNotifContent(s)
	return nu
}

// SetNotifTime sets the "notif_time" field.
func (nu *NotifUpdate) SetNotifTime(t time.Time) *NotifUpdate {
	nu.mutation.SetNotifTime(t)
	return nu
}

// SetNillableNotifTime sets the "notif_time" field if the given value is not nil.
func (nu *NotifUpdate) SetNillableNotifTime(t *time.Time) *NotifUpdate {
	if t != nil {
		nu.SetNotifTime(*t)
	}
	return nu
}

// ClearNotifTime clears the value of the "notif_time" field.
func (nu *NotifUpdate) ClearNotifTime() *NotifUpdate {
	nu.mutation.ClearNotifTime()
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NotifUpdate) SetCreatedAt(t time.Time) *NotifUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NotifUpdate) SetNillableCreatedAt(t *time.Time) *NotifUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// Mutation returns the NotifMutation object of the builder.
func (nu *NotifUpdate) Mutation() *NotifMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotifUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotifUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotifUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotifUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotifUpdate) check() error {
	if v, ok := nu.mutation.NotifType(); ok {
		if err := notif.NotifTypeValidator(v); err != nil {
			return &ValidationError{Name: "notif_type", err: fmt.Errorf(`ent: validator failed for field "Notif.notif_type": %w`, err)}
		}
	}
	if v, ok := nu.mutation.NotifTitle(); ok {
		if err := notif.NotifTitleValidator(v); err != nil {
			return &ValidationError{Name: "notif_title", err: fmt.Errorf(`ent: validator failed for field "Notif.notif_title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.NotifContent(); ok {
		if err := notif.NotifContentValidator(v); err != nil {
			return &ValidationError{Name: "notif_content", err: fmt.Errorf(`ent: validator failed for field "Notif.notif_content": %w`, err)}
		}
	}
	return nil
}

func (nu *NotifUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notif.Table,
			Columns: notif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notif.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.NotifID(); ok {
		_spec.SetField(notif.FieldNotifID, field.TypeUUID, value)
	}
	if value, ok := nu.mutation.AccountID(); ok {
		_spec.SetField(notif.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedAccountID(); ok {
		_spec.AddField(notif.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.NotifType(); ok {
		_spec.SetField(notif.FieldNotifType, field.TypeString, value)
	}
	if value, ok := nu.mutation.NotifTitle(); ok {
		_spec.SetField(notif.FieldNotifTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.NotifContent(); ok {
		_spec.SetField(notif.FieldNotifContent, field.TypeString, value)
	}
	if value, ok := nu.mutation.NotifTime(); ok {
		_spec.SetField(notif.FieldNotifTime, field.TypeTime, value)
	}
	if nu.mutation.NotifTimeCleared() {
		_spec.ClearField(notif.FieldNotifTime, field.TypeTime)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(notif.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NotifUpdateOne is the builder for updating a single Notif entity.
type NotifUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotifMutation
}

// SetNotifID sets the "notif_id" field.
func (nuo *NotifUpdateOne) SetNotifID(u uuid.UUID) *NotifUpdateOne {
	nuo.mutation.SetNotifID(u)
	return nuo
}

// SetNillableNotifID sets the "notif_id" field if the given value is not nil.
func (nuo *NotifUpdateOne) SetNillableNotifID(u *uuid.UUID) *NotifUpdateOne {
	if u != nil {
		nuo.SetNotifID(*u)
	}
	return nuo
}

// SetAccountID sets the "account_id" field.
func (nuo *NotifUpdateOne) SetAccountID(i int64) *NotifUpdateOne {
	nuo.mutation.ResetAccountID()
	nuo.mutation.SetAccountID(i)
	return nuo
}

// AddAccountID adds i to the "account_id" field.
func (nuo *NotifUpdateOne) AddAccountID(i int64) *NotifUpdateOne {
	nuo.mutation.AddAccountID(i)
	return nuo
}

// SetNotifType sets the "notif_type" field.
func (nuo *NotifUpdateOne) SetNotifType(s string) *NotifUpdateOne {
	nuo.mutation.SetNotifType(s)
	return nuo
}

// SetNotifTitle sets the "notif_title" field.
func (nuo *NotifUpdateOne) SetNotifTitle(s string) *NotifUpdateOne {
	nuo.mutation.SetNotifTitle(s)
	return nuo
}

// SetNotifContent sets the "notif_content" field.
func (nuo *NotifUpdateOne) SetNotifContent(s string) *NotifUpdateOne {
	nuo.mutation.SetNotifContent(s)
	return nuo
}

// SetNotifTime sets the "notif_time" field.
func (nuo *NotifUpdateOne) SetNotifTime(t time.Time) *NotifUpdateOne {
	nuo.mutation.SetNotifTime(t)
	return nuo
}

// SetNillableNotifTime sets the "notif_time" field if the given value is not nil.
func (nuo *NotifUpdateOne) SetNillableNotifTime(t *time.Time) *NotifUpdateOne {
	if t != nil {
		nuo.SetNotifTime(*t)
	}
	return nuo
}

// ClearNotifTime clears the value of the "notif_time" field.
func (nuo *NotifUpdateOne) ClearNotifTime() *NotifUpdateOne {
	nuo.mutation.ClearNotifTime()
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NotifUpdateOne) SetCreatedAt(t time.Time) *NotifUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NotifUpdateOne) SetNillableCreatedAt(t *time.Time) *NotifUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// Mutation returns the NotifMutation object of the builder.
func (nuo *NotifUpdateOne) Mutation() *NotifMutation {
	return nuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotifUpdateOne) Select(field string, fields ...string) *NotifUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notif entity.
func (nuo *NotifUpdateOne) Save(ctx context.Context) (*Notif, error) {
	var (
		err  error
		node *Notif
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotifMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Notif)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NotifMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotifUpdateOne) SaveX(ctx context.Context) *Notif {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotifUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotifUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotifUpdateOne) check() error {
	if v, ok := nuo.mutation.NotifType(); ok {
		if err := notif.NotifTypeValidator(v); err != nil {
			return &ValidationError{Name: "notif_type", err: fmt.Errorf(`ent: validator failed for field "Notif.notif_type": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.NotifTitle(); ok {
		if err := notif.NotifTitleValidator(v); err != nil {
			return &ValidationError{Name: "notif_title", err: fmt.Errorf(`ent: validator failed for field "Notif.notif_title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.NotifContent(); ok {
		if err := notif.NotifContentValidator(v); err != nil {
			return &ValidationError{Name: "notif_content", err: fmt.Errorf(`ent: validator failed for field "Notif.notif_content": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotifUpdateOne) sqlSave(ctx context.Context) (_node *Notif, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   notif.Table,
			Columns: notif.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notif.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notif.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notif.FieldID)
		for _, f := range fields {
			if !notif.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notif.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.NotifID(); ok {
		_spec.SetField(notif.FieldNotifID, field.TypeUUID, value)
	}
	if value, ok := nuo.mutation.AccountID(); ok {
		_spec.SetField(notif.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedAccountID(); ok {
		_spec.AddField(notif.FieldAccountID, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.NotifType(); ok {
		_spec.SetField(notif.FieldNotifType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NotifTitle(); ok {
		_spec.SetField(notif.FieldNotifTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NotifContent(); ok {
		_spec.SetField(notif.FieldNotifContent, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NotifTime(); ok {
		_spec.SetField(notif.FieldNotifTime, field.TypeTime, value)
	}
	if nuo.mutation.NotifTimeCleared() {
		_spec.ClearField(notif.FieldNotifTime, field.TypeTime)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(notif.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Notif{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notif.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
