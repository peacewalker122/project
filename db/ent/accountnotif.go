// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/peacewalker122/project/db/ent/accountnotif"
)

// AccountNotif is the model entity for the AccountNotif schema.
type AccountNotif struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int64 `json:"account_id,omitempty"`
	// NotifType holds the value of the "notif_type" field.
	NotifType string `json:"notif_type,omitempty"`
	// NotifTitle holds the value of the "notif_title" field.
	NotifTitle string `json:"notif_title,omitempty"`
	// NotifContent holds the value of the "notif_content" field.
	NotifContent string `json:"notif_content,omitempty"`
	// for deploy purpose
	NotifTime *time.Time `json:"notif_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountNotif) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountnotif.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case accountnotif.FieldNotifType, accountnotif.FieldNotifTitle, accountnotif.FieldNotifContent:
			values[i] = new(sql.NullString)
		case accountnotif.FieldNotifTime, accountnotif.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case accountnotif.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountNotif", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountNotif fields.
func (an *AccountNotif) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountnotif.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				an.ID = *value
			}
		case accountnotif.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				an.AccountID = value.Int64
			}
		case accountnotif.FieldNotifType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_type", values[i])
			} else if value.Valid {
				an.NotifType = value.String
			}
		case accountnotif.FieldNotifTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_title", values[i])
			} else if value.Valid {
				an.NotifTitle = value.String
			}
		case accountnotif.FieldNotifContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notif_content", values[i])
			} else if value.Valid {
				an.NotifContent = value.String
			}
		case accountnotif.FieldNotifTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notif_time", values[i])
			} else if value.Valid {
				an.NotifTime = new(time.Time)
				*an.NotifTime = value.Time
			}
		case accountnotif.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				an.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AccountNotif.
// Note that you need to call AccountNotif.Unwrap() before calling this method if this AccountNotif
// was returned from a transaction, and the transaction was committed or rolled back.
func (an *AccountNotif) Update() *AccountNotifUpdateOne {
	return (&AccountNotifClient{config: an.config}).UpdateOne(an)
}

// Unwrap unwraps the AccountNotif entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (an *AccountNotif) Unwrap() *AccountNotif {
	_tx, ok := an.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountNotif is not a transactional entity")
	}
	an.config.driver = _tx.drv
	return an
}

// String implements the fmt.Stringer.
func (an *AccountNotif) String() string {
	var builder strings.Builder
	builder.WriteString("AccountNotif(")
	builder.WriteString(fmt.Sprintf("id=%v, ", an.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", an.AccountID))
	builder.WriteString(", ")
	builder.WriteString("notif_type=")
	builder.WriteString(an.NotifType)
	builder.WriteString(", ")
	builder.WriteString("notif_title=")
	builder.WriteString(an.NotifTitle)
	builder.WriteString(", ")
	builder.WriteString("notif_content=")
	builder.WriteString(an.NotifContent)
	builder.WriteString(", ")
	if v := an.NotifTime; v != nil {
		builder.WriteString("notif_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(an.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccountNotifs is a parsable slice of AccountNotif.
type AccountNotifs []*AccountNotif

func (an AccountNotifs) config(cfg config) {
	for _i := range an {
		an[_i].config = cfg
	}
}
