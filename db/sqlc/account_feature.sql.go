// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account_feature.sql

package db

import (
	"context"
)

const createAccountQueue = `-- name: CreateAccountQueue :one
INSERT INTO accounts_queue(
    from_account_id,
    to_account_id
) VALUES(
    $1,$2
) RETURNING from_account_id, queue, to_account_id, queue_at
`

type CreateAccountQueueParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

func (q *Queries) CreateAccountQueue(ctx context.Context, arg CreateAccountQueueParams) (AccountsQueue, error) {
	row := q.db.QueryRowContext(ctx, createAccountQueue, arg.FromAccountID, arg.ToAccountID)
	var i AccountsQueue
	err := row.Scan(
		&i.FromAccountID,
		&i.Queue,
		&i.ToAccountID,
		&i.QueueAt,
	)
	return i, err
}

const createAccountsFollow = `-- name: CreateAccountsFollow :one
INSERT INTO accounts_follow(
    from_account_id,
    to_account_id,
    follow
) VALUES(
    $1,$2,$3
) RETURNING from_account_id, to_account_id, follow, follow_at
`

type CreateAccountsFollowParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Follow        bool  `json:"follow"`
}

func (q *Queries) CreateAccountsFollow(ctx context.Context, arg CreateAccountsFollowParams) (AccountsFollow, error) {
	row := q.db.QueryRowContext(ctx, createAccountsFollow, arg.FromAccountID, arg.ToAccountID, arg.Follow)
	var i AccountsFollow
	err := row.Scan(
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Follow,
		&i.FollowAt,
	)
	return i, err
}

const deleteAccountsFollow = `-- name: DeleteAccountsFollow :exec
DElete from accounts_follow
WHERE from_account_id = $1 and to_account_id = $2
`

type DeleteAccountsFollowParams struct {
	Fromid int64 `json:"fromid"`
	Toid   int64 `json:"toid"`
}

func (q *Queries) DeleteAccountsFollow(ctx context.Context, arg DeleteAccountsFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccountsFollow, arg.Fromid, arg.Toid)
	return err
}

const getAccountsFollow = `-- name: GetAccountsFollow :one
SELECT follow FROM accounts_follow
WHERE from_account_id = $1 and to_account_id = $2 LIMIT 1
`

type GetAccountsFollowParams struct {
	Fromid int64 `json:"fromid"`
	Toid   int64 `json:"toid"`
}

func (q *Queries) GetAccountsFollow(ctx context.Context, arg GetAccountsFollowParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getAccountsFollow, arg.Fromid, arg.Toid)
	var follow bool
	err := row.Scan(&follow)
	return follow, err
}

const getAccountsFollowRows = `-- name: GetAccountsFollowRows :execrows
SELECT follow FROM accounts_follow
WHERE from_account_id = $1 and to_account_id = $2 LIMIT 1
`

type GetAccountsFollowRowsParams struct {
	Fromid int64 `json:"fromid"`
	Toid   int64 `json:"toid"`
}

func (q *Queries) GetAccountsFollowRows(ctx context.Context, arg GetAccountsFollowRowsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, getAccountsFollowRows, arg.Fromid, arg.Toid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
